@model Nop.Admin.Models.Omni_Order.OrderListModel
@{
    var gridPageSize = EngineContext.Current.Resolve<Nop.Core.Domain.Common.AdminAreaSettings>().GridPageSize;

    //page title
    ViewBag.Title = T("Admin.Omni_Order.Order").Text;
}
@using (Html.BeginForm())
{
    <div>


    </div>
    
    <div class="section-header">
        <div class="title">
            <img src="@Url.Content("~/Administration/Content/images/ico-sales.png")" alt="" />
            @T("Admin.Omni_Order.Order")
        </div>
        <div class="options">
            @if (Model.isadmin)
            {
                <input type="button" id="produce-selected" class="k-button" value="@T("Admin.Common.Produce.Selected")" />
                <input type="button" id="deliever-selected" class="k-button" value="@T("Admin.Common.Deliver.Selected")" />
                <input type="button" id="cancel-selected" class="k-button" value="@T("Admin.Common.Cancel.Selected")" />
            }

            <input type="button" id="order-selected" class="k-button" value="@T("Admin.Common.Order.Selected")" />
        </div>
    </div>
    <table width="100%">
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.Year):
            </td>
            <td class="adminData">
                @Html.DropDownListFor(model => model.Year, Model.AvailableOrderYear, new { @class = "adminInput" })
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.Term):
            </td>
            <td class="adminData">
                @Html.DropDownListFor(model => model.Term, Model.AvailableOrderTerm, new { @class = "adminInput" })
            </td>
        </tr>
        <tr>
<tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.AvailableBranchCode):
            </td>
            <td class="adminData">
                @if (Model.isadmin)
                {
                    @Html.DropDownListFor(model => model.BranchCode, Model.AvailableBranchCode, new { @class = "adminInput" })
                }
                else
                {
                    @Html.DropDownListFor(model => model.BranchCode, Model.AvailableBranchCode, new { @class = "adminInput", @disabled = "disabled" })
                }
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.OrderType):
            </td>
            <td class="adminData">
                @Html.DropDownListFor(model => model.OrderType, Model.AvailableOrderType, new { @class = "adminInput" })
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.Status):
            </td>
            <td class="adminData">
                @Html.DropDownListFor(model => model.Status, Model.AvailableOrderStatus, new { @class = "adminInput" })
            </td>
        </tr>
        <tr>
            <td colspan="2">
                <input type="button" id="btnSearch" class="k-button" value="@T("Admin.Common.Search")" />
            </td>
        </tr>

    </table>
    <p>
    </p>
    <table class="adminContent">
        @Html.ValidationSummary()
        <tr>
            <td>
                <div id="grid"></div>

                <script>
    kendo.culture("en-AU");
    $(document).ready(function () {
        $("#grid").kendoGrid({
            dataSource: {
                type: "json",
                transport: {
                    read: {
                        url: "@Html.Raw(Url.Action("GetOrderList", "Omni_Order"))",
                        type: "POST",
                        dataType: "json"
                    },
                    create: {
                        url: "@Html.Raw(Url.Action("OrderInsert", "Omni_Order"))",
                        type: "POST",
                        dataType: "json"
                    },
                    update: {
                        url: "@Html.Raw(Url.Action("OrderUpdate", "Omni_Order"))",
                        type: "POST",
                        dataType: "json"
                    },
                    destroy: {
                        url: "@Html.Raw(Url.Action("OrderDelete", "Omni_Order"))",
                        type: "POST",
                        dataType: "json"
                    },
                    parameterMap: function (data, operation) {
                        if (operation != "read") {
                            var d = new Date(data.OrderDate);
                            data.OrderDate = kendo.toString(new Date(d), "yyyy-MM-dd");

                            if (operation == "create")
                            {
                                data.Year = $('#@Html.FieldIdFor(model => model.Year)').val();
                                data.Term = $('#@Html.FieldIdFor(model => model.Term)').val();
                            }

                            return data;
                        } else  {
                            return {
                                BranchCode: $('#@Html.FieldIdFor(model => model.BranchCode)').val(),
                                OrderType: $('#@Html.FieldIdFor(model => model.OrderType)').val(),
                                Status: $('#@Html.FieldIdFor(model => model.Status)').val(),
                                Year: $('#@Html.FieldIdFor(model => model.Year)').val(),
                                Term: $('#@Html.FieldIdFor(model => model.Term)').val()
                            };
                        }
                    }
                },
                autoSync: false,
                schema: {
                    data: "Data",
                    total: "Total",
                    errors: "Errors",
                    model: {
                        id: "Id",
                        fields: {
                            @if(Model.isadmin)
                                            {
                                                <text> BranchCode: { editable: true, type: "string" },</text>
                                            }
                                            else
                                            {
                                                <text> BranchCode: { editable: false, type: "string", defaultValue: "@Model.BranchCode" },</text>
                                            }
                            /*Edited by Karen See 22/02/2021*/
                            /*OrderDate: { editable: false, type: "date" },*/
                            Confirm_Date: { editable: false, type: "date" },
                            /*End*/
                            EstimateDate: { editable: false, type: "date" },
                            OrderType: { editable: true, type: "string" },
                            Year: { editable: false, type: "string", defaultValue: "XXXX" },
                            Term: { editable: false, type: "string", defaultValue: "XXXX" },
                            Week: { editable: true, type: "number" },
                            Status: { editable: false, type: "string" },
                            //SumPrice: { editable: false, type: "number" },
                            print_date: { editable: false, type: "date" },
                            deliver_date: { editable: false, type: "date" },
                            Id: { editable: false, type: "number" }
                        }
                    }
                },
                requestEnd: function (e) {
                    if (e.type == "create" || e.type == "update") {
                        this.read();
                    }
                },
                error: function (e) {
                    display_kendoui_grid_error(e);
                    // Cancel the changes
                    this.cancelChanges();
                },
                pageSize: 10000,
                serverPaging: false,
                serverFiltering: false,
                serverSorting: false
            },
            resizable: true,

            toolbar: ["create"],
            editable: {
                confirmation: false,
                mode: "inline"
            },
            scrollable: false,
            selectable: "row",
            columns: [
            {
                field: "Id",
                headerTemplate: "<input id='mastercheckbox' type='checkbox'/>",
                headerAttributes: { style: "text-align:center" },
                attributes: { style: "text-align:center" },
                template: "<input type='checkbox' value='#=Id#' class='checkboxGroups'/>",
                width: 50
            },
            {
                field: "Id",
                title: "@T("#")",
                width: 50,
                filterable: false
            },
            {
                field: "BranchCode",
                title: "@T("Admin.Omni_Backoffice.Order.Fields.BranchCode")",
                editor: SetBranchDropDownEditor,
                template: '#=getBranchName(BranchCode) #',
                width: 170,
                filterable: false
            }, {
                field: "Confirm_Date",
                title: "@T("Admin.Omni_Backoffice.Order.Fields.ConfirmDate")",
                type: "date",
                template: "#= kendo.toString(Confirm_Date, 'dd/MM/yyyy') #",
                width: 200,
                filterable: false
            }, {
                field: "EstimateDate",
                title: "@T("Admin.Omni_Backoffice.Order.Fields.EstimateDate")",
                type: "date",
                template: "#= kendo.toString(EstimateDate, 'dd/MM/yyyy') #",
                width: 200,
                filterable: false
            }, {
                field: "OrderType",
                title: "@T("Admin.Omni_Backoffice.Order.Fields.OrderType")",
                editor: SetOrdertypeDropDownEditor,
                template: '#=getOrderTypeName(OrderType) #',
                width: 100,
                filterable: false
            }, {
                field: "Year",
                title: "@T("Admin.Omni_Backoffice.Order.Fields.Year")",
                editor: SetYearDropDownEditor,
                width: 100,
                hidden: true,
                filterable: false
            }, {
                field: "Term",
                title: "@T("Admin.Omni_Backoffice.Order.Fields.Term")",
                editor: SetTermDropDownEditor,
                template: '#=getTermName(Term) #',
                width: 100,
                hidden: true,
                filterable: false
            }, {
                field: "Week",
                title: "@T("Admin.Omni_Backoffice.Order.Fields.Week")",
                width: 100,
                format: '{0:n0}'
            }, {
                field: "Status",
                title: "@T("Admin.Omni_Backoffice.Order.Fields.Status")",
                editor: SetStatusDropDownEditor,
                template: '#=getStatusName(Status) #',
                width: 100,
                filterable: false
                @*}, {
                                field: "SumPrice",
                                title: "@T("Admin.Omni_Backoffice.Order.Fields.SumPrice")",
                                width: 100*@
            }, {
                field: "print_date",
                title: "Print Date",
                type: "date",
                template: "#= kendo.toString(print_date, 'dd/MM/yyyy HH:mm') #",
                width: 200,
                filterable: false
            }, {
                field: "deliver_date",
                title: "Delivery Date",
                type: "date",
                template: "#= kendo.toString(deliver_date, 'dd/MM/yyyy HH:mm') #",
                width: 200,
                filterable: false
            }, {
                field: "Id",
                title: "@T("Admin.Omni_Backoffice.Order.Fields.Id")",
                hidden: true,
                filterable: false
            }, {

                command: [{
                    name: "edit",
                    text: "@T("Admin.Common.Edit")",
                }, {
                    name: "destroy",
                    text: "@T("Admin.Common.Delete")"
                }],
                width: 200,
                filterable: false
            }, {
                field: "edit",
                title: "Edit Detail",
                width: 100,
                template: '<a href="/Admin/Omni_Order/EditOrder/#=Id#">Edit Detail</a>',
                editor: "<label></label>",
                editable: false,
                filterable: false
            }
            , {
                field: "edit",
                title: "View Items",
                width: 100,
                template: '<a href="/Admin/Omni_Order/ItemList/#=Id#">View Items</a>',
                editor: "<label></label>",
                editable: false,
                filterable: false
            }]
        });
    });


                </script>

                <script type="text/javascript">

                    var selectedIds = [];
                    $(document).ready(function () {

                        $('#btnSearch').click(function () {
                            var grid = $('#grid').data('kendoGrid');
                            grid.dataSource.page(1); //new search. Set page size to 1
                            grid.dataSource.read();

                            $('.checkboxGroups').attr('checked', false).change();
                            selectedIds = [];
                            return false;
                        });

                        $('#produce-selected').click(function (e) {
                            e.preventDefault();
                            //redirect to required URL
                            setLocation('@(Url.Action("ProduceOrder", "Omni_Order"))?selectedIds=' + selectedIds.join(",") + "&year=" + $('#@Html.FieldIdFor(model => model.Year)').val() + "&term=" + $('#@Html.FieldIdFor(model => model.Term)').val() + "&branch=" + $('#@Html.FieldIdFor(model => model.BranchCode)').val());
                            return false;
                        });

                        $('#deliever-selected').click(function (e) {
                            e.preventDefault();
                            //redirect to required URL
                            setLocation('@(Url.Action("DeliverOrder", "Omni_Order"))?selectedIds=' + selectedIds.join(",") + "&year=" + $('#@Html.FieldIdFor(model => model.Year)').val() + "&term=" + $('#@Html.FieldIdFor(model => model.Term)').val() + "&branch=" + $('#@Html.FieldIdFor(model => model.BranchCode)').val());
                            return false;
                        });

                        $('#order-selected').click(function (e) {
                            e.preventDefault();
                            //redirect to required URL
                            setLocation('@(Url.Action("OrderOrder", "Omni_Order"))?selectedIds=' + selectedIds.join(",") + "&year=" + $('#@Html.FieldIdFor(model => model.Year)').val() + "&term=" + $('#@Html.FieldIdFor(model => model.Term)').val() + "&branch=" + $('#@Html.FieldIdFor(model => model.BranchCode)').val());
                            return false;
                        });

                        $('#cancel-selected').click(function (e) {
                            e.preventDefault();
                            //redirect to required URL
                            setLocation('@(Url.Action("CancelOrder", "Omni_Order"))?selectedIds=' + selectedIds.join(",") + "&year=" + $('#@Html.FieldIdFor(model => model.Year)').val() + "&term=" + $('#@Html.FieldIdFor(model => model.Term)').val() + "&branch=" + $('#@Html.FieldIdFor(model => model.BranchCode)').val());
                            return false;
                        });

                        $('#mastercheckbox').click(function () {
                            $('.checkboxGroups').attr('checked', $(this).is(':checked')).change();
                        });

                        //wire up checkboxes.
                        $('#grid').on('change', 'input[type=checkbox][id!=mastercheckbox]', function (e) {
                            var $check = $(this);
                            if ($check.is(":checked") == true) {
                                var checked = jQuery.inArray($check.val(), selectedIds);
                                if (checked == -1) {
                                    //add id to selectedIds.
                                    selectedIds.push($check.val());
                                }
                            }
                            else {
                                var checked = jQuery.inArray($check.val(), selectedIds);
                                if (checked > -1) {
                                    //remove id from selectedIds.
                                    selectedIds = $.grep(selectedIds, function (item, index) {
                                        return item != $check.val();
                                    });
                                }
                            }
                            updateMasterCheckbox();
                        });

                    });

                    function updateMasterCheckbox() {
                        var numChkBoxes = $('#grid input[type=checkbox][id!=mastercheckbox]').length;
                        var numChkBoxesChecked = $('#grid input[type=checkbox][checked][id!=mastercheckbox]').length;
                        $('#mastercheckbox').attr('checked', numChkBoxes == numChkBoxesChecked && numChkBoxes > 0);
                    }


                    var allBranchList = [

                    @for (int i = 0; i < Model.AvailableBranchCode.Count; i++)
                    {
                        var branch = Model.AvailableBranchCode[i];
                        <text> { Code: "@branch.Value", Name: "@branch.Text" }  </text>
                        if (i != Model.AvailableBranchCode.Count - 1)
                        {
                            <text>,</text>
                        }
                    }
                    ];

                    function SetBranchDropDownEditor(container, options) {
                        $('<input required data-text-field="Name" data-value-field="Code" data-bind="value:'+options.field+'"/>')
                            .appendTo(container)
                            .kendoDropDownList({
                                autoBind: false,
                                dataSource: allBranchList
                            });
                    }
                    function getBranchName(branch)
                    {
                        for ( var i = 0; i < allBranchList.length; i++)
                        {
                            if ( allBranchList[i].Code == branch)
                                return allBranchList[i].Name;
                        }

                        return branch;
                    }


                    var allOrdertypeList = [

        @for (int i = 0; i < Model.AvailableOrderType.Count; i++)
                    {
                        var ordertype = Model.AvailableOrderType[i];
                        <text> { Code: "@ordertype.Value",Name: "@ordertype.Text" } </text>
                        if (i != Model.AvailableOrderType.Count - 1)
                        {
                            <text>,</text>
                        }
                    }
                    ];

                    function SetOrdertypeDropDownEditor(container, options) {
                        $('<input required data-text-field="Name" data-value-field="Code" data-bind="value:'+options.field+'"/>')
                            .appendTo(container)
                            .kendoDropDownList({
                                autoBind: false,
                                dataSource: allOrdertypeList
                            });
                    }
                    function getOrderTypeName(ordertype)
                    {
                        for ( var i = 0; i < allOrdertypeList.length; i++)
                        {
                            if ( allOrdertypeList[i].Code == ordertype)
                                return allOrdertypeList[i].Name;
                        }

                        return ordertype;
                    }


                    var allYearList = [

        @for (int i = 0; i < Model.AvailableOrderYear.Count; i++)
                    {
                        var year = Model.AvailableOrderYear[i];
                        <text> {Code: "@year.Value", Name: "@year.Text" } </text>
                        if (i != Model.AvailableOrderYear.Count - 1)
                        {
                            <text>,</text>
                        }
                    }
                    ];

                    function SetYearDropDownEditor(container, options) {
                        $('<input required data-text-field="Name" data-value-field="Code" data-bind="value:'+options.field+'"/>')
                            .appendTo(container)
                            .kendoDropDownList({
                                autoBind: false,
                                dataSource: allYearList
                            });
                    }


                    var allTermList = [

        @for (int i = 0; i < Model.AvailableOrderTerm.Count; i++)
                    {
                        var term = Model.AvailableOrderTerm[i];
                        <text>   { Code: "@term.Value", Name: "@term.Text"  } </text>
                        if (i != Model.AvailableOrderTerm.Count - 1)
                        {
                            <text>,</text>
                        }
                    }
                    ];

                    function SetTermDropDownEditor(container, options) {
                        $('<input required data-text-field="Name" data-value-field="Code" data-bind="value:'+options.field+'"/>')
                            .appendTo(container)
                            .kendoDropDownList({
                                autoBind: false,
                                dataSource: allTermList
                            });
                    }
                    function getTermName(term)
                    {
                        for ( var i = 0; i < allTermList.length; i++)
                        {
                            if ( allTermList[i].Code == term)
                                return allTermList[i].Name;
                        }

                        return term;
                    }


                    var allOrderStatusList = [

        @for (int i = 0; i < Model.AvailableOrderStatus.Count; i++)
                    {
                        var status = Model.AvailableOrderStatus[i];
                        <text> { Code: "@status.Value", Name: "@status.Text" } </text>
                        if (i != Model.AvailableOrderStatus.Count - 1) { <text>,</text> }
                    }
                    ];

                    function SetStatusDropDownEditor(container, options) {
                        $('<input required data-text-field="Name" data-value-field="Code" data-bind="value:'+options.field+'"/>')
                            .appendTo(container)
                            .kendoDropDownList({
                                autoBind: false,
                                dataSource: allOrderStatusList
                            });
                    }
                    function getStatusName(status)
                    {
                        for ( var i = 0; i < allOrderStatusList.length; i++)
                        {
                            if ( allOrderStatusList[i].Code == status)
                                return allOrderStatusList[i].Name;
                        }

                        return status;
                    }

                </script>
            </td>
        </tr>
    </table>
}