@model Nop.Admin.Models.Omni_Order.OrderGroupModel
@{
    var gridPageSize = 1000;// EngineContext.Current.Resolve<Nop.Core.Domain.Common.AdminAreaSettings>().GridPageSize;

    //page title
    ViewBag.Title = T("Admin.Omni_Order.OrderGroup").Text;

}
@using (Html.BeginForm())
{
    <div class="section-header">
        <div class="title">
            <img src="@Url.Content("~/Administration/Content/images/ico-sales.png")" alt="" />
            @if ( Model.Order_Type == "TEST")
            {
                @T("Admin.Omni_Order.OrderTest")
            }
            else
            { 
                @T("Admin.Omni_Order.OrderGroup")
            }
            <a href="javascript:history.go(-1)">(Back to order list)</a>
        </div>

        
    </div>
    <table width="100%">
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.Order_Id):
            </td>
            <td class="adminData">
                @Html.TextBoxFor(model => model.Order_Id, new { @readonly = "readonly" })
                &nbsp;&nbsp;<input type="button" id="order-selected" class="k-button" value="@T("Admin.Common.Order.Selected")" />
            </td>
        </tr>

        
@if (Model.Order_Type != "TEST")
{  <text>
        <tr>
            <td class="adminTitle">
                    @Html.Label("(Starting)Unit");
            </td>
            <td class="adminData">
                @Html.TextBoxFor(model => model.Week, new { @readonly = "readonly" })
            </td>
        </tr>
        </text>
}
else
{
<text> <tr>
           <td colspan="3"> The ordered Qty will apply remaining no. of test in the term </td>
        </tr>
</text>
}
</table>
    <p>
    </p>
        <style type="text/css">
        .k-grid table tr.k-grid-edit-row {
            background: gold;
            color: black;
        }
    </style>
    <table class="adminContent" >
        <tr>
            <td>
                <div id="ordergroup-grid" ></div>

                <script>



                    $(document).ready(function () {
                        $("#ordergroup-grid").kendoGrid({
                            dataSource: {
                                type: "json",
                                transport: {
                                    read: {
                                        url: "@Html.Raw(Url.Action("GetOrderGroupList", "Omni_Order"))",
                                        type: "POST",
                                        dataType: "json"
                                    },
                                    update: {
                                        url:"@Html.Raw(Url.Action("OrderGroupUpdate", "Omni_Order"))",
                                        type: "POST",
                                        dataType: "json"
                                    },
                                    parameterMap: function(data, operation) {
                                        if (operation != "read") {
                                            return data;
                                        } else {
                                            //for some reasons only such "Filter" data be parsed
                                            return  {Order_Id:  $('#@Html.FieldIdFor(model => model.Order_Id)').val()
                                                @if ( Model.Order_Type != "TEST")
                                                {
                                                    <text>,Week:  $('#@Html.FieldIdFor(model => model.Week)').val()</text>
                                                }
                                            };
                                        }
                                    }
                                },
                                height : "100%",
                                autoSync : false,
                                schema: {
                                    data: "Data",
                                    total: "Total",
                                    errors: "Errors",
                                    model: {
                                        id: "Id",
                                        fields: {
                                            Order_Id: { editable: false, type: "number" },
                                            ItemSet_Id: { editable: false, type: "number" },
                                            SetName: { editable: false, type: "string" },
                                            Term: { editable: false, type: "string" },
                                            Grade: { editable: false, type: "string" },
                                            Grade2: { editable: false, type: "string" },
                                            SetCategory: { editable: false, type: "string" },
                                            Week: { editable: true, type: "number" },
                                            Level: { editable: false, type: "string" },
                                            Qty: { editable: true, type: "number" },
                                            Qty_Teacher: { editable: true, type: "number" },
                                            Qty_NewBook: { editable: true, type: "number" },
                                            is_Half : { editable: true, type: "string" }
                                        }
                                    },
                                },
                                requestEnd: function (e) {
                                    if (e.type == "update") {
                                        this.read();
                                    }
                                },
                                error: function(e) {
                                    display_kendoui_grid_error(e);
                                    // Cancel the changes
                                    this.cancelChanges();
                                },
                                pageSize: @(gridPageSize),
                                serverPaging: true
                            },

                            sortable: true,
                            @if(Model.is_Editable)
            {<text>
                            editable: {
                                confirmation: false,
                                mode: "inline"
                            },</text>
            }
                            batch : false,
                            scrollable: true,
                            selectable: "row",
                            columnmenu:true,

                            columns: [{
                                field: "Order_Id",
                                title: "@T("Admin.Omni_Backoffice.Item.Fields.Order_Id")",
                                hidden : true
                            }, {
                                field: "Grade",
                                title: "@T("Admin.Omni_Backoffice.ItemSet.Fields.Grade")",
                                hidden : true
                            }, {
                                field: "Grade2",
                                title: "@T("Admin.Omni_Backoffice.ItemSet.Fields.Grade")",
                                template: '#=getGradeName(Grade2) #',
                                //width: 70
                            },{
                                field: "ItemSet_Id",
                                title: "@T("Admin.Omni_Backoffice.Item.Fields.Set_Id")",
                                hidden : true
                            },{
                                field: "SetName",
                                title: "@T("Admin.Omni_Backoffice.ItemSet.Fields.SetName")",
                                //width: 150,
                            }, {

                                command: [{
                                    name: "edit",
                                    text: "@T("Admin.Common.Edit")",
                                }],
                                width: 120,
                                filterable:false
                            }, {
                                field: "Term",
                                title: "@T("Admin.Omni_Backoffice.ItemSet.Fields.Term")",
                                template: '#=getTermName(Term) #',
                                //width: 150,
                                hidden : true

                            }, {
                                field: "SetCategory",
                                title: "@T("Admin.Omni_Backoffice.ItemSet.Fields.SetCategory")",
                                template: '#=getCategoryName(SetCategory) #',
                                //width: 100,
                                hidden : true
                            }, {
                                field: "Level",
                                title: "@T("Admin.Omni_Backoffice.ItemSet.Fields.Level")",
                                template: '#=getLevelName(Level) #',
                                //width: 100,
                                hidden : true
                            }, {
                                field: "Week",
                                title : "Starting Test No.",
                                format: '{0:n0}',
                                //width: 90,
                                @if ( Model.Order_Type == "TEST")
                                {
                                    <text>hidden : false</text>
                                }
                                else
                                {
                                    <text>hidden : true</text>
                                }
                    }, {
                        field: "Qty",
                        title: "@T("Admin.Omni_Backoffice.OrderbyItemSet.Fields.Qty")",
                        format: '{0:n0}',
                        //width: 70
                    }, {
                        field: "Qty_Teacher",
                        title: "@T("Admin.Omni_Backoffice.OrderbyItemSet.Fields.Qty_Teacher")",
                        format: '{0:n0}',
                        //width: 70
                    }, {
                        field: "Qty_NewBook",
                        title: "@T("Admin.Omni_Backoffice.OrderbyItemSet.Fields.Qty_NewBook")",
                        format: '{0:n0}',
                        //width: 70
                    }, {
                        field: "Remarks",
                        title: "Remarks",

                        //width: 100
                    },{
                        field: "is_Half",
                        title: "@T("Admin.Omni_Backoffice.OrderbyItemSet.Fields.is_Half")",
                        editor : isHalfDropDownEditor,
                        @if(Model.Order_Type == "TEST")
                        {<text>
                        hidden : true,
                        </text>
                        }
                        //width: 100

                        }, {
                        field: "Id",
                        title: "@T("Admin.Omni_Backoffice.OrderbyItemSet.Fields.Id")",
                        hidden : true
                    }],
                    });
                    });
                </script>
                <script type="text/javascript">

                    $(document).ready(function () {

                        $('#btnSearch').click(function () {
                            var grid = $('#ordergroup-grid').data('kendoGrid');
                            grid.dataSource.page(1); //new search. Set page size to 1
                            grid.dataSource.read();
                            return false;
                        });

                        $('#order-selected').click(function (e) {
                            e.preventDefault();
                            //redirect to required URL
                            var selectedIds = $('#@Html.FieldIdFor(model => model.Order_Id)').val();
                            setLocation('@(Url.Action("OrderOrder", "Omni_Order"))?selectedIds=' + selectedIds);
                            return false;
                        });

                        var bodyheight = $(window).height() - 300;
                        $("#ordergroup-grid").height(bodyheight);

                    });

                    $(window).resize(function() {
                        var bodyheight = $(window).height() - 300;
                        $("#ordergroup-grid").height(bodyheight);
                        bodyheight = bodyheight - 17;
                        $("#k-grid-content").height(bodyheight);
                    });



                    var allCategoryList = [

                        @for (int i = 0; i < Model.AvailableSetCategorys.Count; i++)
                    {
                        var category = Model.AvailableSetCategorys[i];
                        <text>
                        {
                            Code: "@category.Value",
                            Name: "@category.Text"
                        }
                        </text>
                        if (i != Model.AvailableSetCategorys.Count - 1)
                        {
                            <text>,</text>
                        }
                    }
                    ];

                    function getCategoryName(setcategory)
                    {
                        for ( var i = 0; i < allCategoryList.length; i++)
                        {
                            if ( allCategoryList[i].Code == setcategory)
                                return allCategoryList[i].Name;
                        }

                        return setcategory;
                    }

                    var allGradeList = [

                @for (int i = 0; i < Model.AvailableGrades.Count; i++)
                    {
                        var grade = Model.AvailableGrades[i];
                        <text>
                        {
                            Code: "@grade.Value",
                            Name: "@grade.Text"
                        }
                        </text>
                        if (i != Model.AvailableGrades.Count - 1)
                        {
                            <text>,</text>
                        }
                    }
                    ];

                    function getGradeName(grade)
                    {
                        for ( var i = 0; i < allGradeList.length; i++)
                        {
                            if ( allGradeList[i].Code == grade)
                                return allGradeList[i].Name;
                        }

                        return grade;
                    }

                    var allLevelList = [

                @for (int i = 0; i < Model.AvailableLevels.Count; i++)
                    {
                        var level = Model.AvailableLevels[i];
                        <text>
                        {
                            Code: "@level.Value",
                            Name: "@level.Text"
                        }
                        </text>
                        if (i != Model.AvailableLevels.Count - 1)
                        {
                            <text>,</text>
                        }
                    }
                    ];

                    function getLevelName(level)
                    {
                        for ( var i = 0; i < allLevelList.length; i++)
                        {
                            if ( allLevelList[i].Code == level)
                                return allLevelList[i].Name;
                        }

                        return level;
                    }



                    var allTermList = [

                @for (int i = 0; i < Model.AvailableTerms.Count; i++)
                    {
                        var term = Model.AvailableTerms[i];
                        <text>
                        {
                            Code: "@term.Value",
                            Name: "@term.Text"
                        }
                        </text>
                        if (i != Model.AvailableTerms.Count - 1)
                        {
                            <text>,</text>
                        }
                    }
                    ];

                    function getTermName(term)
                    {
                        for ( var i = 0; i < allTermList.length; i++)
                        {
                            if ( allTermList[i].Code == term)
                                return allTermList[i].Name;
                        }

                        return term;
                    }


                    var allis_Half = [
                        { Code: "Y", Name: "Yes" },
                        { Code: "N", Name: "No" },

                    ];

                    function isHalfDropDownEditor(container, options) {
                        $('<input required data-text-field="Name" data-value-field="Code" data-bind="value:'+options.field+'"/>')
                            .appendTo(container)
                            .kendoDropDownList({
                                autoBind: false,
                                dataSource: allis_Half
                            });
                    }

                </script>
            </td>
        </tr>
    </table>
}