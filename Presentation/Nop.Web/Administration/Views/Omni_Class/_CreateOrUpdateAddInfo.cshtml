@model Nop.Admin.Models.Omni_Class.AdditionInfoModel
@using Nop.Core.Domain.Omni_Backoffice;
@Html.ValidationSummary(false)
@*@Html.HiddenFor(model => model.Id)*@

<div id="AddInfo-edit">
    <ul>
        <li @Html.RenderSelectedTabIndex(0, GetSelectedTabIndex())>
            @T("Admin.Class.GradeInfo")
        </li>
        <li @Html.RenderSelectedTabIndex(1, GetSelectedTabIndex())>
            @T("Admin.Class.BranchInfo")
        </li>
    </ul>
    <div>
        @TabGradeInfo()
    </div>
  
     <div>
        @TabBrachInfo()
     </div>

  
</div>
<script>
    $(document).ready(function() {
        $("#AddInfo-edit").kendoTabStrip({
            animation:  {
                open: {
                    effects: "fadeIn"
                }
            },
            select: tabstrip_on_tab_select
        });
    });
</script>


<script type="text/javascript">

    $(document).ready(function () {

        $('#btnSearch').click(function () {
            var grid = $('#AddInfo-edit').data('kendoGrid');
            grid.dataSource.page(1); //new search. Set page size to 1
            grid.dataSource.read();
            return false;
        });
        
    });

  
    var allBranchList = [

                   @for (int i = 0; i < Model.AvailableBranchs.Count; i++)
    {
        var popupbranch = Model.AvailableBranchs[i];
        <text> { Code: "@popupbranch.Value", Name: "@popupbranch.Text" }  </text>
        if (i != Model.AvailableBranchs.Count - 1)
        {
            <text>,</text>
        }
    }
    ];

    function SetBranchDropDownEditor(container, options) {
        $('<input required data-text-field="Name" data-value-field="Code" data-bind="value:'+options.field+'"/>')
            .appendTo(container)
            .kendoDropDownList({
                autoBind: false,
                dataSource: allBranchList
            });
    }

    function getBranchName(branch) {

        for (var i = 0; i < allBranchList.length; i++) {
            if (allBranchList[i].Code == branch)
                return allBranchList[i].Name;
        }

        return branch;
    }

</script>




@*@{
    //custom tabs
    var eventMessage = new AdminTabStripCreated(this.Html, "class-edit");
    EngineContext.Current.Resolve<IEventPublisher>().Publish(eventMessage);
    foreach (var eventBlock in eventMessage.BlocksToRender)
    {
    @eventBlock
    }
    }*@



    @*save selected tab index*@
    <input type="hidden" id="selected-tab-index" name="selected-tab-index" value="@(GetSelectedTabIndex())">

    @helper TabGradeInfo()
    {


        <table width="100%">
            <tr>
                <td class="adminTitle">
                    @Html.NopLabelFor(model => model.Id):
                </td>
                <td class="adminData">
                    @Html.DisplayFor(model => model.Id)
                </td>
            </tr>
            <tr>
                <td class="adminTitle">
                    @Html.NopLabelFor(model => model.Stud_Id):
                </td>
                <td class="adminData">
                    @Html.DisplayFor(model => model.Stud_Id)
                </td>
            </tr>
            <tr>
                <td class="adminTitle">
                    @Html.Label("Student Name"):
                </td>
                <td class="adminData">
                    @Html.DisplayFor(model => model.FirstName)  @Html.DisplayFor(model => model.LastName)
                </td>
            </tr>
            <tr>
                <td class="adminTitle">
                    @Html.Label("Teaching Grade"):
                </td>
                <td class="adminData">
                    @Html.DropDownListFor(model => model.Grade, Model.AvailableGrade, new { @class = "adminInput", @disabled = "disabled" })
                </td>
            </tr>
            <tr>
                <td class="adminTitle">
                    @Html.NopLabelFor(model => model.Branch):
                </td>
                <td class="adminData">
                    @Html.DropDownListFor(model => model.Branch, Model.AvailableBranchs, new { @class = "adminInput", @disabled = "disabled" })
                </td>
            </tr>
            <tr>
                <td class="adminTitle">
                    @Html.NopLabelFor(model => model.Actual_Grade):
                </td>
                <td class="adminData">
                    @Html.DropDownListFor(model => model.Actual_Grade, Model.AvailableActual_Grade)
                </td>
            </tr>
            <tr>
                <td class="adminTitle">
                    @Html.NopLabelFor(model => model.Remarks):
                </td>
                <td class="adminData">
                    @Html.TextAreaFor(model => model.Remarks)
                </td>
            </tr>
            <tr>
                <td colspan="2">
                    <input type="submit" name="Save" class="k-button" value="@T("Admin.Common.Save")" />
                    <input type="submit" name="save-continue" class="k-button" value="@T("Admin.Common.SaveContinue")" />
                </td>
            </tr>
        </table>
       
}

    @helper TabBrachInfo()  // Add Branch Tab
    {

    var gridPageSize = EngineContext.Current.Resolve<Nop.Core.Domain.Common.AdminAreaSettings>().GridPageSize;

        <div id="studentbranch-grid"></div>


   <script>
    kendo.culture("en-AU");
    $(document).ready(function () {
        $("#studentbranch-grid").kendoGrid({
            dataSource: {
                type: "json",
                traditional: true,
                transport: {
                    read: {
                        url: "@Html.Raw(Url.Action("GetStudentBranchList", "Omni_Class", new { Stud_Id = Model.Stud_Id }))",
                        type: "POST",
                        dataType: "json"
                    },
                    create: {
                        url: "@Html.Raw(Url.Action("StudentBranchInsert", "Omni_Class"))",
                        type: "POST",
                        dataType: "json"
                    },
                    update: {
                        url:"@Html.Raw(Url.Action("StudentBranchUpdate", "Omni_Class"))",
                        type: "POST",
                        dataType: "json"
                    },
                    destroy: {
                        url: "@Html.Raw(Url.Action("StudentBranchDelete", "Omni_Class"))",
                        type: "POST",
                        dataType: "json"
                    },
                    parameterMap: function(data, operation) {
                        if (operation != "read") {

                            var d = new Date(data.TranDate);

                            data.TranDate = kendo.toString(new Date(d), "yyyy-MM-dd");
                            return data;
                        }
                    }
                },
                schema: {
                    data: "Data",
                    total: "Total",
                    errors: "Errors",
                    model: {
                        id: "Id",
                        fields: {
                            Id: { editable: false, type: "number" },
                            Stud_Id: { editable: false, type: "string", defaultValue : "@Model.Stud_Id " },
                            FirstName: { editable: false, type: "string", defaultValue : "@Model.FirstName "  },
                            LastName: { editable: false, type: "string", defaultValue : "@Model.LastName "  },
                            Branch: { editable: true, type: "string" },
                            Remarks: { editable: true, type: "string" }
                        }
                    }
                },
                requestEnd: function (e) {
                    if (e.type == "create" || e.type == "update") {
                        this.read();
                    }
                },
                error: function(e) {
                    display_kendoui_grid_error(e);
                    // Cancel the changes
                    this.cancelChanges();
                },
                pageSize: @(gridPageSize),
                serverPaging: true,
                serverFiltering: true,
                serverSorting: true
            },
            resizable : true,
            selectable: "row",
            pageable: {
                refresh: true
            },
            toolbar: ["create"],
            editable: {
                confirmation: false,
                mode: "inline"
            },
            scrollable: false,
            columns: [ {
                field: "Id",
                title: "@T("Admin.Omni_Backoffice.StudentBranch.Fields.Id")",
                hidden : true
            },{
                field: "Stud_Id",
                title: "@T("Admin.Omni_Backoffice.StudentBranch.Fields.Stud_Id")",
                width: 300
                //hidden : true
            },{
                field: "FirstName",
                title: "@T("Admin.Omni_Backoffice.StudentBranch.Fields.FirstName")",
                width: 150,
            },{
                field: "LastName",
                title: "@T("Admin.Omni_Backoffice.StudentBranch.Fields.LastName")",
                width: 150,
            },{
                field: "Branch",
                title: "@T("Admin.Omni_Backoffice.StudentBranch.Fields.Branch")",
                editor: SetBranchDropDownEditor,
                template: '#=getBranchName(Branch) #',
                width: 200,
                filterable: false
            }, {
                field: "Remarks",
                title: "@T("Admin.Omni_Backoffice.StudentBranch.Fields.Remarks")",
                width: 500
            }, {
                command: [{
                    name: "edit",
                    text: "@T("Admin.Common.Edit")"
                }, {
                    name: "destroy",
                    text: "@T("Admin.Common.Delete")"
                }],
                filterable:false
            }]
        });
    });
</script>
}


