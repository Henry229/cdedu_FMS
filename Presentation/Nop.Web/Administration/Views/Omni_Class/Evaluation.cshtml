@model Nop.Admin.Models.Omni_Class.EvaluationModel
@{
    var gridPageSize = EngineContext.Current.Resolve<Nop.Core.Domain.Common.AdminAreaSettings>().GridPageSize;

    //page title
    ViewBag.Title = T("Admin.Omni_Class.Evaluation").Text;
}
@using (Html.BeginForm())
{
    <div class="section-header">
        <div class="title">
            <img src="@Url.Content("~/Administration/Content/images/ico-sales.png")" alt="" />
            @T("Admin.Omni_Class.Evaluation")
            <a href="javascript:history.go(-1)">(Back to teacher list)</a>
        </div>
    </div>
    <table width="100%">
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.Teacher_Id):
            </td>
            <td class="adminData">
                @Html.TextBoxFor(model => model.Teacher_Id, new { @readonly = "readonly" })
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.Label("Teacher");
            </td>
            <td class="adminData">
                @Html.TextBox("teachername", Model.Title + Model.FirstName + " " + Model.LastName, new { @readonly = "readonly" })
            </td>
        </tr>
    </table>
    <p>
    </p>
    <table class="adminContent">
        <tr>
            <td>
                <div id="grid"></div>

                <script>
                    $(document).ready(function () {
                        $("#grid").kendoGrid({
                            dataSource: {
                                type: "json",
                                transport: {
                                    read: {
                                        url: "@Html.Raw(Url.Action("GetEvaluationList", "Omni_Class"))",
                                        type: "POST",
                                        dataType: "json"
                                    },
                                    create: {
                                        url: "@Html.Raw(Url.Action("EvaluationInsert", "Omni_Class"))",
                                        type: "POST",
                                        dataType: "json"
                                    },
                                    update: {
                                        url:"@Html.Raw(Url.Action("EvaluationUpdate", "Omni_Class"))",
                                        type: "POST",
                                        dataType: "json"
                                    },
                                    destroy: {
                                        url: "@Html.Raw(Url.Action("EvaluationDelete", "Omni_Class"))",
                                        type: "POST",
                                        dataType: "json"
                                    },
                                    parameterMap: function(data, operation) {
                                        if (operation != "read") {
                                            var d = new Date(data.reg_date);
                                            data.reg_date = kendo.toString(new Date(d), "yyyy-MM-dd");

                                            return data;
                                        } else {
                                            return {
                                                Teacher_Id:  $('#@Html.FieldIdFor(model => model.Teacher_Id)').val()
                                            };
                                        }
                                    }
                                },
                                autoSync:false,
                                schema: {
                                    data: "Data",
                                    total: "Total",
                                    errors: "Errors",
                                    model: {
                                        id: "Id",
                                        fields: {
                                            Teacher_Id : { editable: false, type: "number" ,defaultValue : "@Model.Teacher_Id"  },
                                            EvaluationType : { editable: true, type: "string" },
                                            reg_date : { editable: false, type: "date" },
                                            Evaluator : { editable: true, type: "string" },
                                            Remarks : { editable: true, type: "string" },
                                            Score : { editable: true, type: "number"}
                                        }
                                    }
                                },
                                requestEnd: function (e) {
                                    if (e.type == "create" || e.type == "update") {
                                        this.read();
                                    }
                                },
                                error: function(e) {
                                    display_kendoui_grid_error(e);
                                    // Cancel the changes
                                    this.cancelChanges();
                                },
                                pageSize: @(gridPageSize),
                                serverPaging: true,
                                serverFiltering: false,
                                serverSorting: false
                            },
                            resizable : true,
                            pageable: {
                                refresh: true
                            },

                            toolbar: ["create"],

                            editable: {
                                confirmation: false,
                                mode: "inline"
                            },
                            scrollable: false,
                            columns: [{
                                field: "Teacher_Id",
                                title: "@T("Admin.Omni_Backoffice.Evaluation.Fields.Teacher_Id")",
                                hidden:true

                            }, {
                                field: "EvaluationType",
                                title: "@T("Admin.Omni_Backoffice.Evaluation.Fields.EvaluationType")",
                                editor : EvaluationTypeDropDownEditor,
                                template: '#=getEvaluationTypeName(EvaluationType) #',
                                width: 60
                                
                            }, {
                                field: "Evaluator",
                                title: "@T("Admin.Omni_Backoffice.Evaluation.Fields.Evaluator")",
                                width: 60
                            }, {
                                field: "reg_date",
                                title: "@T("Admin.Omni_Backoffice.Evaluation.Fields.reg_date")",
                                format: "{0:dd/MM/yyyy}",
                                width: 60
                            }, {
                                field: "Score",
                                title: "@T("Admin.Omni_Backoffice.Evaluation.Fields.Score")",
                                editor : ScoreDropDownEditor,
                                template: '#=getScoreName(Score) #',
                                width: 80
                            }, {
                                field: "Remarks",
                                title: "@T("Admin.Omni_Backoffice.Evaluation.Fields.Remarks")",
                                width: 250
                            }, {
                                field: "Id",
                                title: "@T("Admin.Omni_Backoffice.Evaluation.Fields.Id")",
                                hidden : true
                            }, {
                                field: "Class_Id",
                                title: "@T("Admin.Omni_Backoffice.Evaluation.Fields.Class_Id")",
                                hidden : true
                            },
                            {
                                command: [{
                                    name: "edit",
                                    text: "@T("Admin.Common.Edit")",
                                }, {
                                    name: "destroy",
                                    text: "@T("Admin.Common.Delete")"
                                }],
                                width: 200,
                                filterable:false

                            }

                            ]
                        });
                    });
                </script>

                <script type="text/javascript">

                    $(document).ready(function () {

                        $('#btnSearch').click(function () {
                            var grid = $('#grid').data('kendoGrid');
                            grid.dataSource.page(1); //new search. Set page size to 1
                            grid.dataSource.read();
                            return false;
                        });

                    });





                    var allEvaluationTypeList = [

        @for (int i = 0; i < Model.AvailableEvaluationType.Count; i++)
                    {
                        var item = Model.AvailableEvaluationType[i];
                        <text> { Code: "@item.Value", Name: "@item.Text" } </text>
                        if (i != Model.AvailableEvaluationType.Count - 1)
                        { <text>,</text> }
                    }
                    ];

                    function EvaluationTypeDropDownEditor(container, options) {
                        $('<input required data-text-field="Name" data-value-field="Code" data-bind="value:'+options.field+'"/>')
                            .appendTo(container)
                            .kendoDropDownList({
                                autoBind: false,
                                dataSource: allEvaluationTypeList
                            });
                    }
                    function getEvaluationTypeName(evaluationtype)
                    {
                        for ( var i = 0; i < allEvaluationTypeList.length; i++)
                        {
                            if ( allEvaluationTypeList[i].Code == evaluationtype)
                                return allEvaluationTypeList[i].Name;
                        }

                        return evaluationtype;
                    }



                    var allScoreList = [{Code:10, Name:"★"},{Code:15, Name:"★☆"},{Code:20, Name:"★★"},{Code:25, Name:"★★☆"},{Code:30, Name:"★★★"}
                        ,{Code:35, Name:"★★★☆"},{Code:40, Name:"★★★★"},{Code:45, Name:"★★★★☆"},{Code:50, Name:"★★★★★"}


                    ];

                        function ScoreDropDownEditor(container, options) {
                            $('<input required data-text-field="Name" data-value-field="Code" data-bind="value:'+options.field+'"/>')
                                .appendTo(container)
                                .kendoDropDownList({
                                    autoBind: false,
                                    dataSource: allScoreList
                                });
                        }
                        function getScoreName(score)
                        {
                            for ( var i = 0; i < allScoreList.length; i++)
                            {
                                if ( allScoreList[i].Code == score)
                                    return allScoreList[i].Name;
                            }

                            return score;
                        }






                </script>
            </td>
        </tr>
    </table>
}