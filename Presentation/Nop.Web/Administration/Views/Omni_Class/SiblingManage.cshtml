@model Nop.Admin.Models.Omni_Class.SiblingManageModel
@{
    var gridPageSize = EngineContext.Current.Resolve<Nop.Core.Domain.Common.AdminAreaSettings>().GridPageSize;

    //page title
    ViewBag.Title = T("Admin.Omni_Class.SiblingManage").Text;
}
@using (Html.BeginForm())
{
    <div class="section-header">
        <div class="title">
            <img src="@Url.Content("~/Administration/Content/images/ico-sales.png")" alt="" />
            @T("Admin.Omni_Class.SiblingManage")
            @Html.ActionLink("(" + T("Admin.Omni_Class.ParentList.BackToList") + ")", "Parents")
        </div>

    </div>
    <table>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.Parent_Id):
            </td>
            <td class="adminData">
                @Html.TextBoxFor(model => model.Parent_Id, new { @readonly = "readonly" })
               
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.AvailableBranchs):
            </td>
            <td class="adminData">
                @Html.DropDownListFor(model => model.Branch, Model.AvailableBranchs, new { @readonly = "readonly" })
            </td>
        </tr>
        <tr>
            <td colspan="2">
                <input type="button" id="btnSearch" class="k-button" value="@T("Admin.Common.Search")" />
            </td>
        </tr>

    </table>
    <p>
    </p>
    <table class="adminContent">
        <tr>
            <td>
                <div id="grid"></div>
               
                <script>
    kendo.culture("en-AU");
    $(document).ready(function () {
        $("#grid").kendoGrid({
            dataSource: {
                type: "json",
                transport: {
                    read: {
                        url: "@Html.Raw(Url.Action("GetSiblingManageList", "Omni_Class"))",
                        type: "POST",
                        dataType: "json"
                    },
                    create: {
                        url: "@Html.Raw(Url.Action("SiblingManageInsert", "Omni_Class"))",
                        type: "POST",
                        dataType: "json"
                    },
                    update: {
                        url: "@Html.Raw(Url.Action("SiblingManageUpdate", "Omni_Class"))",
                        type: "POST",
                        dataType: "json"
                    },
                    destroy: {
                        url: "@Html.Raw(Url.Action("SiblingManageDelete", "Omni_Class"))",
                        type: "POST",
                        dataType: "json"
                    },

                    parameterMap: function (data, operation) {
                        if (operation != "read") {

                            var sid = getStudentId(data.FirstName); 
                            data.Stud_Id = sid;

                            return data;
                        } else {
                            return {
                                Branch: $('#@Html.FieldIdFor(model => model.Branch)').val(),
                                Parent_Id: $('#@Html.FieldIdFor(model => model.Parent_Id)').val(),
                                Seq: $('#@Html.FieldIdFor(model => model.Seq)').val()

                            };
                        }
                    }
                },
                autoSync: false,
                schema: {
                    data: "Data",
                    total: "Total",
                    errors: "Errors",
                    model: {
                        id: "Id",
                        fields: {
                            Branch: { editable: false, type: "string", defaultValue: "@Model.Branch" },
                            Parent_Id: { editable: false, type: "number", defaultValue: "@Model.Parent_Id " },
                            Seq: { editable: false, type: "number" },
                            Stud_Id: { editable: false, type: "string" },
                            Id_Number: { editable: false, type: "string" },
                            FirstName: { editable: true, type: "string" },
                            Remarks: { editable: true, type: "string" },
                            Id: { editable: false, type: "number" }
                        }
                    }
                },
                requestEnd: function (e) {
                    if (e.type == "create" || e.type == "update") {
                        this.read();
                    }

                },
                error: function (e) {
                    display_kendoui_grid_error(e);
                    this.cancelChanges();
                },
                pageSize: 10000,
                serverPaging: false,
                serverFiltering: false,
                serverSorting: false
            },
            resizable: true,
            selectable: "row",
            pageable: {
                refresh: true
            },
            toolbar: ["create"],
            editable: "inline",
            scrollable: false,
            columns: [
        {
            field: "Id",
            title: "ID",
            hidden: true,
            filterable: false
        }, {
            field: "Parent_Id",
            title: "@T("Admin.Omni_Backoffice.SiblingManage.Fields.Parent_Id")",
            width: 100,
            hidden: true,
            filterable: false
        }, {
            field: "Seq",
            title: "@T("Admin.Omni_Backoffice.SiblingManage.Fields.Seq")",
            width: 30,
            filterable: false
        }, {
            field: "Id_Number",
            title: "@T("Admin.Omni_Backoffice.SiblingManage.Fields.Id_Number")",
            width: 200,
            filterable: false
        }, {
            field: "Stud_Id",
            title: "@T("Admin.Omni_Backoffice.SiblingManage.Fields.Stud_Id")",
            //editor: '<p  id = "Stud_Id"  data-bind="value:Stud_Id" >Stud_Id </p>',
            //template: '#=getStudentId(FirstName) #',
            width: 300,
            filterable: false
        }, {
            field: "FirstName",
            title: "@T("Admin.Omni_Backoffice.SiblingManage.Fields.FirstName")",
            editor: StudentFirstNameInputEditor,
            template: '#=getStudentFirstName(Stud_Id) #',
            width: 300,
            filterable: false
        }, {
            field: "Remarks",
            title: "@T("Admin.Omni_Backoffice.SiblingManage.Fields.Remarks")",
            width: 300,
            filterable: false
        }, {
            command: [{
                name: "edit",
                text: "@T("Admin.Common.Edit")"
            }, {
                name: "destroy",
                text: "@T("Admin.Common.Delete")"
            }],
        filterable:false
        }],
            change: function (e) {
                var selectedRows = this.select();
                var dataItem = this.dataItem(selectedRows[0]);
                var studentid = getStudentId(dataItem.FirstName);
                //alert(dataItem.FirstName);
                $("#Stud_Id").text(studentid);
                //$("#FirstName").text(dataItem.FirstName);

            }

        });
       
    });

</script>
               
<script type="text/javascript">

    $(document).ready(function () {

        $('#btnSearch').click(function () {
            var grid = $('#grid').data('kendoGrid');
            grid.dataSource.page(1); //new search. Set page size to 1
            grid.dataSource.read();


        });


    });


  

    var allStudentNamesList = [
        @for (int i = 0; i < Model.AvailableStudentNames.Count; i++)
                        {
                            var studentname = Model.AvailableStudentNames[i];
                            <text> { Code: "@studentname.Value", Name: "@studentname.Text" } </text>
                            if (i != Model.AvailableStudentNames.Count - 1)
                            {
                                <text>,</text>
                            }
                        }
    ];

    function StudentFirstNameInputEditor(container, options) {
        $('<input id= "FirstName" required data-text-field="Name" data-value-field="Code" data-bind="value:' + options.field + '"/>')
            .appendTo(container)
            .kendoAutoComplete({
                autoBind: false,
                dataSource: allStudentNamesList,
                filter: "contains",
                placeholder: "Start typing Student Name..."
            });
        
    }


    function getStudentFirstName(studid) {
        for (var i = 0; i < allStudentNamesList.length; i++) {
            if (allStudentNamesList[i].Code == studid)
                return allStudentNamesList[i].Name;
        }

        return studid;
    }
    function getStudentId(firstname) {
        for (var i = 0; i < allStudentNamesList.length; i++) {
            if (allStudentNamesList[i].Name == firstname)
                return allStudentNamesList[i].Code;
        }

        return firstname;
    }

    var allBranchList = [

    @for (int i = 0; i < Model.AvailableBranchs.Count; i++)
                    {
                        var branch = Model.AvailableBranchs[i];
                        <text> { Code: "@branch.Value", Name: "@branch.Text" }  </text>
                        if (i != Model.AvailableBranchs.Count - 1)
                        {
                            <text>,</text>
                        }
                    }
    ];

    function SetBranchDropDownEditor(container, options) {
        $('<input required data-text-field="Name" data-value-field="Code" data-bind="value:' + options.field + '"/>')
            .appendTo(container)
            .kendoDropDownList({
                autoBind: false,
                dataSource: allBranchList
            });
    }
    function getBranchName(branch) {
        for (var i = 0; i < allBranchList.length; i++) {
            if (allBranchList[i].Code == branch)
                return allBranchList[i].Name;
        }

        return branch;
    }

</script>
            </td>
        </tr>
    </table>
}