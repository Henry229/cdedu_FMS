@model Nop.Admin.Models.Omni_Class.ClassEnrolModel
@{
    var gridPageSize = EngineContext.Current.Resolve<Nop.Core.Domain.Common.AdminAreaSettings>().GridPageSize;

    //page title
    ViewBag.Title = T("Admin.Omni_Class.ClassEnrolment").Text;
}
@using (Html.BeginForm())
{
    <div class="section-header">
        <div class="title">
            <img src="@Url.Content("~/Administration/Content/images/ico-sales.png")" alt="" />
            @T("Admin.Omni_Class.ClassEnrolment")
            <a href="javascript:history.go(-1)">(Back to student list)</a>
        </div>
    </div>
    <table width="100%">
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.Stud_Id):
            </td>
            <td class="adminData">
                @Html.TextBoxFor(model => model.Stud_Id, new { @readonly = "readonly" })
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.Label("Student"):
            </td>
            <td class="adminData">
                @Html.TextBox("Student Name", Model.FirstName + ", " + Model.LastName, new { @readonly = "readonly" })
                @Html.DropDownListFor(model => model.Grade, Model.AvailableGrade, new { @class = "adminInput" })
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.Year):
            </td>
            <td class="adminData">
                @Html.DropDownListFor(model => model.Year, Model.AvailableYearList, new { @class = "adminInput" })
            </td>
        </tr>

        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.Term):
            </td>
            <td class="adminData">
                @Html.DropDownListFor(model => model.Term, Model.AvailableTermList, new { @class = "adminInput" })
            </td>
        </tr>


        <tr>

            <td class="adminTitle">
                @Html.NopLabelFor(model => model.Branch):
            </td>
            <td class="adminData">
                @if (Model.is_admin)
                {
                    @Html.DropDownListFor(model => model.Branch, Model.AvailableBranchList, new { @class = "adminInput" })
                }
                else
                {
                    @Html.DropDownListFor(model => model.Branch, Model.AvailableBranchList, new { @class = "adminInput", @disabled = "disabled" })
                }
            </td>
        </tr>
        <tr>
            <td colspan="2">
                <input type="button" id="btnSearch" class="k-button" value="@T("Admin.Common.Search")" />
            </td>
        </tr>
    </table>
    <p>
    </p>
    <table class="adminContent">
        <tr>
            <td>
                <div id="grid"></div>

                <script>
    $(document).ready(function () {
        $("#grid").kendoGrid({
            dataSource: {
                type: "json",
                transport: {
                    read: {
                        url: "@Html.Raw(Url.Action("GetClassEnrolList", "Omni_Class"))",
                        type: "POST",
                        dataType: "json"
                    },
                    update: {
                        url:"@Html.Raw(Url.Action("ClassEnrolUpdate", "Omni_Class"))",
                        type: "POST",
                        dataType: "json"
                    },
                    parameterMap: function(data, operation) {
                        if (operation != "read") {
                            var d = new Date(data.FromDate);
                            var d2 = new Date(data.ToDate);
                            data.FromDate = kendo.toString(new Date(d), "yyyy-MM-dd");
                            data.ToDate = kendo.toString(new Date(d2), "yyyy-MM-dd");

                            return data;
                        } else {
                            return {
                                Stud_Id:  $('#@Html.FieldIdFor(model => model.Stud_Id)').val(),
                                Year:  $('#@Html.FieldIdFor(model => model.Year)').val(),
                                Term:  $('#@Html.FieldIdFor(model => model.Term)').val(),
                                Branch: $('#@Html.FieldIdFor(model => model.Branch)').val(),
                                Grade: $('#@Html.FieldIdFor(model => model.Grade)').val()
                                            };
                                        }
                                    }
                                },
                                autoSync:false,
                                schema: {
                                    data: "Data",
                                    total: "Total",
                                    errors: "Errors",
                                    model: {
                                        id: "Id",
                                        fields: {
                                            Year : { editable: false, type: "string"  },
                                            Term : { editable: false, type: "string"  },
                                            Branch : { editable: false, type: "string"  },
                                            Stud_Id : { editable: false, type: "string" ,defaultValue : "@Model.Stud_Id"  },
                            Course_Id : { editable: false, type: "int"  },
                            Course_Name : { editable: false, type: "string"  },
                            Unit_Price : { editable: false, type: "number" },
                            AttendWeek : { editable: true, type: "number" },
                            MaterialFee : { editable: false, type: "number" },
                            HalfBook : { editable: true, type: "string" },
                            Class_Id :  { editable: true, type: "number" },
                            Discount_Code : { editable: true, type: "string" },
                            Discount_Rate : { editable: true, type: "number" },
                            PaymentMethod : { editable: true, type: "string" },
                            TotalAmount : { editable: false, type: "number" },
                            PayStatus : { editable: true, type: "string" },
                            Remark : { editable: true, type: "string" },
                        }
                    }
                },
                requestEnd: function (e) {
                    if (e.type == "create" || e.type == "update") {
                        this.read();
                    }
                    else{

                    }
                },
                error: function(e) {
                    display_kendoui_grid_error(e);
                    // Cancel the changes
                    this.cancelChanges();
                },
                pageSize: @(gridPageSize),
                serverPaging: true,
                serverFiltering: false,
                serverSorting: false
            },
            resizable : true,
            pageable: {
                refresh: true
            },
            editable: {
                confirmation: false,
                mode: "popup"
            },
            selectable: "row",
            scrollable: false,
            columns: [{
                field: "Year",
                title: "@T("Admin.Omni_Backoffice.ClassEnrol.Fields.Year")",
                hidden:true
            }, {
                field: "Term",
                title: "@T("Admin.Omni_Backoffice.ClassEnrol.Fields.Term")",
                hidden:true
            }, {
                field: "Branch",
                title: "@T("Admin.Omni_Backoffice.ClassEnrol.Fields.Branch")",
                hidden:true
            }, {
                field: "Stud_Id",
                title: "@T("Admin.Omni_Backoffice.ClassEnrol.Fields.Stud_Id")",
                hidden:true
            }, 
            {
                command: [{
                    name: "edit",
                    text: "@T("Admin.Common.Edit")",
                }],
            width: 200,
            filterable:false
            },{
                field: "Class_Id",
                title: "@T("Admin.Omni_Backoffice.ClassEnrol.Fields.Class_Id")",
                editor: ClassDropDownEditor,
                template: '#=getClassName(Class_Id) #',
                width: 100
            }, {

                    field: "Course_Id",
                    title: "@T("Admin.Omni_Backoffice.ClassEnrol.Fields.Course_Id")",
                    hidden:true
                }, {
                    field: "Course_Name",
                    title: "@T("Admin.Omni_Backoffice.ClassEnrol.Fields.Course_Id")",
                    width: 200
                }, {
                    field: "Unit_Price",
                    title: "@T("Admin.Omni_Backoffice.ClassEnrol.Fields.Unit_Price")",
                    format: '{0:n2}', attributes: { style: "text-align:right;" },
                    width: 50
                }, {
                    field: "AttendWeek",
                    title: "@T("Admin.Omni_Backoffice.ClassEnrol.Fields.AttendWeek")",
                    width: 50

                }, {

                    field: "MaterialFee",
                    title: "@T("Admin.Omni_Backoffice.ClassEnrol.Fields.MaterialFee")",
                    format: '{0:n2}', attributes: { style: "text-align:right;" },
                    width: 70
                }, {
                    field: "HalfBook",
                    title: "@T("Admin.Omni_Backoffice.ClassEnrol.Fields.HalfBook")",
                    editor: YNDropDownEditor,
                    width: 60
                }, {
                    field: "Level",
                    title: "@T("Admin.Omni_Backoffice.ClassEnrol.Fields.Level")",
                    editor: LevelDropDownEditor,
                    template: '#=getLevelName(Level) #',
                    width: 50

            }, {
                field: "Discount_Code",
                title: "@T("Admin.Omni_Backoffice.ClassEnrol.Fields.Discount_Code")",
                editor: DiscountDropDownEditor,
                template: '#=getDiscountName(Discount_Code) #',
                width: 200
            }, {
                field: "Discount_Rate",
                title: "@T("Admin.Omni_Backoffice.ClassEnrol.Fields.Discount_Rate")",
                format: '{0:n2}', attributes: { style: "text-align:right;" },
                width: 50
            }, {
                field: "PaymentMethod",
                title: "@T("Admin.Omni_Backoffice.ClassEnrol.Fields.PaymentMethod")",
                editor: PayMethodDropDownEditor,
                template: '#=getPayMethodName(PaymentMethod) #',
                width: 50
            }, {
                field: "TotalAmount",
                title: "@T("Admin.Omni_Backoffice.ClassEnrol.Fields.TotalAmount")",
                format: '{0:n2}', attributes: { style: "text-align:right;" },
                width: 50
            }, {
                field: "PayStatus",
                title: "@T("Admin.Omni_Backoffice.ClassEnrol.Fields.PayStatus")",
                editor: StatusDropDownEditor,
                template: '#=getStatusName(PayStatus) #',
                width: 250
            }, {
                field: "Remark",
                title: "@T("Admin.Omni_Backoffice.TeacherCareer.Fields.Remarks")",
                width: 250
            }, {
                field: "payment",
                title: "Payment Detail",
                width: 100,
                template: '<a href="/Admin/Omni_Class/ClassEnrolPay?enrol_Id=#=Id#">Payment Detail</a>',
                filterable: false
            }, {
                field: "Id",
                title: "@T("Admin.Omni_Backoffice.TeacherCareer.Fields.Id")",
                hidden : true
            }

            ]
        });
    });
                </script>

                <script type="text/javascript">

    $(document).ready(function () {

        $('#btnSearch').click(function () {
            setLocation('@(Url.Action("ClassEnrols2", "Omni_Class"))?Stud_Id=' + $('#@Html.FieldIdFor(model => model.Stud_Id)').val() + "&branch=" + $('#@Html.FieldIdFor(model => model.Branch)').val()+ "&year=" + $('#@Html.FieldIdFor(model => model.Year)').val() + "&term=" + $('#@Html.FieldIdFor(model => model.Term)').val() + "&branch=" + $('#@Html.FieldIdFor(model => model.Branch)').val() + "&grade=" + $('#@Html.FieldIdFor(model => model.Grade)').val());
            return false;
        });

    });


    var allPayStatusList = [

@for (int i = 0; i < Model.AvailablePayStatusList.Count; i++)
                    {
                        var item = Model.AvailablePayStatusList[i];
                        <text> { Code: "@item.Value", Name: "@item.Text" } </text>
                        if (i != Model.AvailablePayStatusList.Count - 1)
                        { <text>,</text> }
                    }
    ];

    function PayStatusDropDownEditor(container, options) {
        $('<input required data-text-field="Name" data-value-field="Code" data-bind="value:'+options.field+'"/>')
            .appendTo(container)
            .kendoDropDownList({
                autoBind: false,
                dataSource: allPayStatusList
            });
    }

    function getPayStatusName(paystatus)
    {
        for ( var i = 0; i < allCareerTypeList.length; i++)
        {
            if ( allPayStatusList[i].Code == paystatus)
                return allPayStatusList[i].Name;
        }

        return paystatus;
    }


    var allClassList = [

@for (int i = 0; i < Model.AvailableClassList.Count; i++)
                    {
                        var item = Model.AvailableClassList[i];
                        <text> { Code: "@item.Value", Name: "@item.Text" } </text>
                        if (i != Model.AvailableClassList.Count - 1)
                        { <text>,</text> }
                        }
    ];

    function ClassDropDownEditor(container, options) {
        $('<input required data-text-field="Name" data-value-field="Code" data-bind="value:'+options.field+'"/>')
            .appendTo(container)
            .kendoDropDownList({
                autoBind: false,
                dataSource: allClassList
            });
    }

    function getClassName(class_id)
    {
        for ( var i = 0; i < allClassList.length; i++)
        {
            if ( allClassList[i].Code == class_id)
                return allClassList[i].Name;
        }

        return class_id;
    }

    var allPayStatusList = [

@for (int i = 0; i < Model.AvailablePayStatusList.Count; i++)
                        {
                            var item = Model.AvailablePayStatusList[i];
                            <text> { Code: "@item.Value", Name: "@item.Text" } </text>
                            if (i != Model.AvailablePayStatusList.Count - 1)
                            { <text>,</text> }
                            }
    ];

    function StatusDropDownEditor(container, options) {
        $('<input required data-text-field="Name" data-value-field="Code" data-bind="value:'+options.field+'"/>')
            .appendTo(container)
            .kendoDropDownList({
                autoBind: false,
                dataSource: allPayStatusList
            });
    }

    function getStatusName(paystatus)
    {
        for ( var i = 0; i < allPayStatusList.length; i++)
        {
            if ( allPayStatusList[i].Code == paystatus)
                return allPayStatusList[i].Name;
        }

        return paystatus;
    }


    var allDiscountList = [

@for (int i = 0; i < Model.AvailableDiscount_Code.Count; i++)
                            {
                                var item = Model.AvailableDiscount_Code[i];
                                <text> { Code: "@item.Value", Name: "@item.Text" } </text>
                                if (i != Model.AvailableDiscount_Code.Count - 1)
                                { <text>,</text> }
                                }
    ];

    function DiscountDropDownEditor(container, options) {
        $('<input required data-text-field="Name" data-value-field="Code" data-bind="value:'+options.field+'"/>')
            .appendTo(container)
            .kendoDropDownList({
                autoBind: false,
                dataSource: allDiscountList
            });
    }

    function getDiscountName(discount)
    {
        for ( var i = 0; i < allDiscountList.length; i++)
        {
            if ( allDiscountList[i].Code == discount)
                return allDiscountList[i].Name;
        }

        return discount;
    }



    var allPayMethodList = [

@for (int i = 0; i < Model.AvailablePayMethod.Count; i++)
                                        {
                                            var item = Model.AvailablePayMethod[i];
                                            <text> { Code: "@item.Value", Name: "@item.Text" } </text>
                                            if (i != Model.AvailablePayMethod.Count - 1)
                                            { <text>,</text> }
                                            }
    ];

    function PayMethodDropDownEditor(container, options) {
        $('<input required data-text-field="Name" data-value-field="Code" data-bind="value:'+options.field+'"/>')
            .appendTo(container)
            .kendoDropDownList({
                autoBind: false,
                dataSource: allPayMethodList
            });
    }

    function getPayMethodName(paymethod)
    {
        for ( var i = 0; i < allPayMethodList.length; i++)
        {
            if ( allPayMethodList[i].Code == paymethod)
                return allPayMethodList[i].Name;
        }

        return paymethod;
    }

    var allLevelList = [

@for (int i = 0; i < Model.AvailableLevel.Count; i++)
    {
        var item = Model.AvailableLevel[i];
        <text> { Code: "@item.Value", Name: "@item.Text" } </text>
        if (i != Model.AvailableLevel.Count - 1)
        { <text>,</text> }
        }
    ];

    function LevelDropDownEditor(container, options) {
        $('<input required data-text-field="Name" data-value-field="Code" data-bind="value:'+options.field+'"/>')
            .appendTo(container)
            .kendoDropDownList({
                autoBind: false,
                dataSource: allLevelList
            });
    }

    function getLevelName(level)
    {
        for ( var i = 0; i < allLevelList.length; i++)
        {
            if ( allLevelList[i].Code == level)
                return allLevelList[i].Name;
        }

        return level;
    }

    var allYNList = [{Code:"Y", Name:"Y"}, {Code:"N", Name:"N"}];

    function YNDropDownEditor(container, options) {
        $('<input required data-text-field="Name" data-value-field="Code" data-bind="value:'+options.field+'"/>')
            .appendTo(container)
            .kendoDropDownList({
                autoBind: false,
                dataSource: allYNList
            });
    }

</script>
            </td>
        </tr>
    </table>
}