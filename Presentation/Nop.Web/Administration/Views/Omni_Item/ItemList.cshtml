@model Nop.Admin.Models.Omni_Item.ItemListModel
@{
    var gridPageSize = EngineContext.Current.Resolve<Nop.Core.Domain.Common.AdminAreaSettings>().GridPageSize;

    //page title
    ViewBag.Title = T("Admin.Item").Text;
}
@using (Html.BeginForm())
{
    <div class="section-header">
        <div class="title">
            <img src="@Url.Content("~/Administration/Content/images/ico-sales.png")" alt="" />
            @T("Admin.Item")
        </div>
        @if (Model.editable)
        { <text>
        <div class="options">
            <a href="@Url.Action("CreateItem")" class="k-button">@T("Admin.Common.AddNew")</a>
        </div>
        </text> }
    </div>
    <table width="100%">
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.ItemCategoryId):
            </td>
            <td class="adminData">
                @Html.DropDownListFor(model => model.ItemCategoryId, Model.ItemCategoryList, new { @class = "adminInput" })
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.Term):
            </td>
            <td class="adminData">
                @Html.DropDownListFor(model => model.Term, Model.AvailableTermList, new { @class = "adminInput" })
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.Grade):
            </td>
            <td class="adminData">
                @Html.DropDownListFor(model => model.Grade, Model.AvailableGradeList, new { @class = "adminInput" })
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.ItemCode):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.ItemCode)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.ItemName):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.ItemName)
            </td>
        </tr>
        <tr>
            <td colspan="2">
                <input type="button" id="btnSearch" class="k-button" value="@T("Admin.Common.Search")" />
            </td>
        </tr>
    </table>
    <p>
    </p>
    <table class="adminContent">
        <tr>
            <td>
                <div id="items-grid"></div>

                <script>
                    $(document).ready(function () {
                        $("#items-grid").kendoGrid({
                            dataSource: {
                                type: "json",
                                transport: {
                                    read: {
                                        url: "@Html.Raw(Url.Action("GetItemList", "Omni_Item"))",
                                        type: "POST",
                                        dataType: "json",
                                        data: additionalData    // 조회조건을 추가로 넣어주는 함수
                                    }
                                },
                                schema: {
                                    data: "Data",
                                    total: "Total",
                                    errors: "Errors"
                                },
                                error: function(e) {
                                    display_kendoui_grid_error(e);
                                    // Cancel the changes
                                    this.cancelChanges();
                                },
                                pageSize: @(gridPageSize),
                                serverPaging: true,
                                serverFiltering: true,
                                serverSorting: true
                            },
                            pageable: {
                                refresh: true
                            },
                            editable: {
                                confirmation: false,
                                mode: "inline"
                            },
                            filterable: {
                                extra: false,
                                operators: {
                                    string: {
                                        contains: "Contains",
                                        eq: "Is equal to"
                                    }
                                }
                            },
                            scrollable: false,
                            columns: [{      
                                field: "ItemCode",
                                title: "@T("Admin.Omni_Backoffice.Item.Fields.ItemCode")"
                            }, {
                                field: "ItemName",
                                title: "@T("Admin.Omni_Backoffice.Item.Fields.ItemName")"
                            }, {
                                field: "Term",
                                title: "@T("Admin.Omni_Backoffice.Item.Fields.Term")",
                                template: '#=getTermName(Term) #'
                            }, {
                                field: "Grade",
                                title: "@T("Admin.Omni_Backoffice.Item.Fields.Grade")",
                                template: '#=getGradeName(Grade) #'
                            }, {
                                field: "ItemCategoryName",
                                title: "@T("Admin.Omni_Backoffice.Item.Fields.ItemCategory")",
                                width: 100
                            }, {
                                field: "Qty_Balance",
                                title: "@T("Admin.Omni_Backoffice.Item.List.Qty_Balance")",
                                width: 100
                            @if (Model.editable)
                            { <text>
                                }, {

                                    field: "Id",
                                    title: "@T("Admin.Common.Edit")",
                                    width: 100,
                                    template: '<a href="EditItem/#=Id#">@T("Admin.Common.Edit")</a>'
                              </text>
                            }
                            }]
                        });
                    });
                </script>

                <script type="text/javascript">

                    $(document).ready(function () {

                        $('#btnSearch').click(function () {
                            var grid = $('#items-grid').data('kendoGrid');
                            grid.dataSource.page(1); //new search. Set page size to 1
                            grid.dataSource.read();
                            return false;
                        });
                    });



                    function additionalData() {
                        return {
                            ItemCategoryId:  $('#@Html.FieldIdFor(model => model.ItemCategoryId)').val(),
                            ItemCode: $('#@Html.FieldIdFor(model => model.ItemCode)').val(),
                            ItemName:  $('#@Html.FieldIdFor(model => model.ItemName)').val(),
                            Term :  $('#@Html.FieldIdFor(model => model.Term)').val(),
                            Grade :  $('#@Html.FieldIdFor(model => model.Grade)').val(),
                        };
                    }


                    
                    var allGradeList = [

                @for (int i = 0; i < Model.AvailableGradeList.Count; i++)
                    {
                        var grade = Model.AvailableGradeList[i];
                        <text>
                        {
                            Code: "@grade.Value",
                            Name: "@grade.Text"
                        }
                        </text>
                        if (i != Model.AvailableGradeList.Count - 1)
                        {
                            <text>,</text>
                        }
                    }
                    ];

                    function getGradeName(grade)
                    {
                        for ( var i = 0; i < allGradeList.length; i++)
                        {
                            if ( allGradeList[i].Code == grade)
                                return allGradeList[i].Name;
                        }

                        return grade;
                    }


                    var allTermList = [

                @for (int i = 0; i < Model.AvailableTermList.Count; i++)
                    {
                        var term = Model.AvailableTermList[i];
                        <text>
                        {
                            Code: "@term.Value",
                            Name: "@term.Text"
                        }
                        </text>
                        if (i != Model.AvailableTermList.Count - 1)
                        {
                            <text>,</text>
                        }
                    }
                    ];

    
                    function getTermName(term)
                    {
                        for ( var i = 0; i < allTermList.length; i++)
                        {
                            if ( allTermList[i].Code == term)
                                return allTermList[i].Name;
                        }

                        return term;
                    }


                </script>
            </td>
        </tr>
    </table>
}