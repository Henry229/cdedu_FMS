@model Nop.Admin.Models.Omni_Item.ItemModel
@using Nop.Core.Domain.Omni_Backoffice;
@Html.ValidationSummary(false)
@Html.HiddenFor(model => model.Id)

<div id="item-edit">
    <ul>
        <li @Html.RenderSelectedTabIndex(0, GetSelectedTabIndex())>
            @T("Admin.Items.Info")
        </li>
        @if (Model.Id > 0)  
        {
            <li @Html.RenderSelectedTabIndex(1, GetSelectedTabIndex())>
                @T("Admin.Items.Stock")
            </li>
        }
    </ul>
    <div>
        @TabInfo()
    </div>
    @if (Model.Id > 0)
    {
        <div>
            @TabStock()
        </div>
    }
</div>
<script>
    $(document).ready(function() {
        $("#item-edit").kendoTabStrip({
            animation:  {
                open: {
                    effects: "fadeIn"
                }
            },
            select: tabstrip_on_tab_select
        });
    });
</script>

@{
    //custom tabs
    var eventMessage = new AdminTabStripCreated(this.Html, "item-edit");
    EngineContext.Current.Resolve<IEventPublisher>().Publish(eventMessage);
    foreach (var eventBlock in eventMessage.BlocksToRender)
    {
        @eventBlock
    }
}



@*save selected tab index*@
<input type="hidden" id="selected-tab-index" name="selected-tab-index" value="@(GetSelectedTabIndex())">

@helper TabInfo()
{
    <script type="text/javascript">
        $(document).ready(function () {

            //$("#@Html.FieldIdFor(model => model.Id)").change(toggleItemCategory);

        });

    </script>
    <table class="adminContent">
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.ItemCode):
            </td>
            @if (Model.Id > 0)
            {
                <td class="adminData">
                    @Html.TextBoxFor(model => model.ItemCode, new { @readonly = "readonly" })
                </td>
            }
            else
            {
                <td class="adminData">
                    @Html.TextBoxFor(model => model.ItemCode, new { @readonly = "readonly", @Value = "Auto" })
                </td>
            }

        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.ItemName):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.ItemName)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.ItemCategory):
            </td>
            <td class="adminData">
                @Html.DropDownList("ItemCategory", Model.AvailableCategorys)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.DT_From):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.DT_From)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.DT_To):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.DT_To)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.UnitPrice):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.UnitPrice) [@Model.PrimaryStoreCurrencyCode]
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.UnitPrice_Half):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.UnitPrice_Half) [@Model.PrimaryStoreCurrencyCode]
                @Html.ValidationMessageFor(model => model.UnitPrice)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.Grade):
            </td>
            <td class="adminData">
                @Html.DropDownList("Grade", Model.AvailableGrades)
            </td>
        </tr>

        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.Term):
            </td>
            <td class="adminData">
                @Html.DropDownList("Term", Model.AvailableTerms)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.Level):
            </td>
            <td class="adminData">
                @Html.DropDownList("Level", Model.AvailableLevels)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.Subject):
            </td>
            <td class="adminData">
                @Html.DropDownList("Subject", Model.AvailableSubjects)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.Remarks):
            </td>
            <td class="adminData">
                @Html.TextAreaFor(model => model.Remarks)
                @Html.ValidationMessageFor(model => model.Remarks)
            </td>
        </tr>
    </table>
}
@helper TabStock()  // Stock Tab
{
    var gridPageSize = EngineContext.Current.Resolve<Nop.Core.Domain.Common.AdminAreaSettings>().GridPageSize;

    <div id="stock-grid"></div>

    <script>
        kendo.culture("en-AU");
        $(document).ready(function () {
            $("#stock-grid").kendoGrid({
                dataSource: {
                    type: "json",
                    transport: {
                        read: {
                            url: "@Html.Raw(Url.Action("StockList", "Omni_Order", new { ItemId = Model.Id }))",
                            type: "POST",
                            dataType: "json"
                        },
                        create: {
                        url: "@Html.Raw(Url.Action("StockInsert", "Omni_Order"))",
                        type: "POST",
                        dataType: "json"
                                },
                        update: {
                            url:"@Html.Raw(Url.Action("StockUpdate", "Omni_Order"))",
                            type: "POST",
                            dataType: "json"
                        },
                        destroy: {
                            url: "@Html.Raw(Url.Action("StockDelete", "Omni_Order"))",
                            type: "POST",
                            dataType: "json"
                        },
                        parameterMap: function(data, operation) {
                            if (operation != "read") {
                                var d = new Date(data.TranDate);
                                data.TranDate = kendo.toString(new Date(d), "yyyy-MM-dd");
                                return data;
                            } 
                        }
                    },
                    schema: {
                        data: "Data",
                        total: "Total",
                        errors: "Errors",
                        model: {
                            id: "Id",
                            fields: {
                                ItemCode: { editable: false, type: "string", defaultValue : "@Model.ItemCode" },
                                TranDate: { editable: true, type: "date" },
                                InQty: { editable: true, type: "number" },
                                OutQty: { editable: true, type: "number" },
                                RemainQty: { editable: false, type: "number" },
                                Remark: { editable: true, type: "string" },
                                Id: { editable: false, type: "number" }
                                }
                        }
                    },
                    requestEnd: function (e) {
                        if (e.type == "create" || e.type == "update") {
                            this.read();
                        }
                    },
                    error: function(e) {
                        display_kendoui_grid_error(e);
                        // Cancel the changes
                        this.cancelChanges();
                    },
                    pageSize: @(gridPageSize),
                    serverPaging: true,
                    serverFiltering: true,
                    serverSorting: true
                },
                pageable: {
                    refresh: true
                },
                toolbar: ["create"],
                editable: {
                    confirmation: false,
                    mode: "inline"
                },
                scrollable: false,
                columns: [{
                    field: "TranDate",
                    title: "@T("Admin.Omni_Backoffice.Stock.Fields.TranDate")",
                    width: 200,
                    type: "date",
                    template: "#= kendo.toString(TranDate, 'dd/MM/yyyy HH:mm:dd') #",
                }, {
                    field: "InQty",
                    title: "@T("Admin.Omni_Backoffice.Stock.Fields.InQty")",
                    width: 200,
                }, {
                    field: "OutQty",
                    title: "@T("Admin.Omni_Backoffice.Stock.Fields.OutQty")",
                    width: 200,
                }, {
                    field: "RemainQty",
                    title: "@T("Admin.Omni_Backoffice.Stock.Fields.RemainQty")",
                    width: 200,
                }, {
                    field: "Remark",
                    title: "@T("Admin.Omni_Backoffice.Stock.Fields.Remark")",
                }, {

                    command: [{
                        name: "edit",
                        text: "@T("Admin.Common.Edit")",
                                }, {
                        name: "destroy",
                        text: "@T("Admin.Common.Delete")"
                            }],
                        width: 200,
                        filterable:false
                }, {
                    field: "Id",
                    title: "@T("Admin.Omni_Backoffice.Stock.Fields.Id")",
                    hidden : true
 
                }]
            });
        });
    </script>
}