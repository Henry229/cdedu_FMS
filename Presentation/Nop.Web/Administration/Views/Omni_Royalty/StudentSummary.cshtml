@model Nop.Admin.Models.Omni_Royalty.StudentSummaryModel
@{
    var gridPageSize = EngineContext.Current.Resolve<Nop.Core.Domain.Common.AdminAreaSettings>().GridPageSize;

    //page title
    ViewBag.Title = T("Admin.Omni_Royalty.StudentSummary").Text;
}
@using (Html.BeginForm())
{
    <div class="section-header">
        <div class="title">
            <img src="@Url.Content("~/Administration/Content/images/ico-sales.png")" alt="" />
            @T("Admin.Omni_Royalty.StudentSummary")
        </div>

    </div>
    <table width="100%">
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.Year):
            </td>
            <td class="adminData">
                @Html.DropDownListFor(model => model.Year, Model.AvailableYear, new { @class = "adminInput" })
            </td>
        </tr>

        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.Term):
            </td>
            <td class="adminData">
                @Html.DropDownListFor(model => model.Term, Model.AvailableTerm, new { @class = "adminInput" })
            </td>
        </tr>
        <tr>
            <td colspan="2">
                <input type="button" id="btnSearch" class="k-button" value="@T("Admin.Common.Search")" />
            </td>
        </tr>

    </table>
    <p>
    </p>
    <table class="adminContent">
        @Html.ValidationSummary()
        <tr>
            <td>
                <div id="grid"></div>
                <script>
                    kendo.culture("en-AU");
                    $(document).ready(function () {
                        $("#grid").kendoGrid({
                            dataSource: {
                                type: "json",
                                transport: {
                                    read: {
                                        url: "@Html.Raw(Url.Action("GetStudentSummary", "Omni_Royalty"))",
                                        type: "POST",
                                        dataType: "json"
                                    },

                                    parameterMap: function (data, operation) {
                                        if (operation != "read") {
                                            return data;
                                        } else {
                                            return {
                                                Year: $('#@Html.FieldIdFor(model => model.Year)').val(),
                                                Term: $('#@Html.FieldIdFor(model => model.Term)').val()
                                            };
                                        }
                                    }
                                },
                                autoSync: false,
                                schema: {
                                    data: "Data",
                                    total: "Total",
                                    errors: "Errors",
                                    model: {
                                        id: "Id",
                                        fields: {

                                            Branch: { editable: false, type: "string" },
                                            Year: { editable: false, type: "string", defaultValue: "@Model.Year" },
                                            Term: { editable: false, type: "string", defaultValue: "@Model.Term" },
                                            Cnt_Book: { editable: false, type: "number" },
                                            Cnt_Course: { editable: false, type: "number" },
                                            Cnt_Primary: { editable: false, type: "number" },
                                            Cnt_Secondary: { editable: false, type: "number" },

                                        }
                                    }
                                },
                                requestEnd: function (e) {
                                    if (e.type == "create" || e.type == "update") {
                                        this.read();
                                    }
                                },
                                error: function (e) {
                                    display_kendoui_grid_error(e);
                                    // Cancel the changes
                                    this.cancelChanges();
                                },
                                pageSize: 10000,
                                serverPaging: false,
                                serverFiltering: false,
                                serverSorting: false
                            },
                            resizable: true,

                            scrollable: false,
                            columns: [
                            {
                                field: "Branch",
                                title: "@T("Admin.Omni_Backoffice.Closing.Fields.Branch")",
                                editor: SetBranchDropDownEditor,
                                template: '#=getBranchName(Branch) #',
                                width: 170,
                                filterable: false
                            }, {
                                field: "Year",
                                title: "@T("Admin.Omni_Backoffice.Closing.Fields.Year")",
                                editor: SetYearDropDownEditor,
                                hidden: true,
                                filterable: false
                            }, {
                                field: "Term",
                                title: "@T("Admin.Omni_Backoffice.Closing.Fields.Term")",
                                editor: SetTermDropDownEditor,
                                template: '#=getTermName(Term) #',
                                hidden: true,
                                filterable: false
                            }, {
                                field: "Cnt_Book",
                                title: "@T("Admin.Omni_Backoffice.StudentSummary.Cnt_Book")",
                                format: '{0:n0}',
                                width: 100,
                                filterable: false
                            }, {
                                field: "Cnt_Course",
                                title: "@T("Admin.Omni_Backoffice.StudentSummary.Cnt_Course")",
                                format: '{0:n0}',
                                width: 100,
                                filterable: false
                            }, {
                                field: "Cnt_Primary",
                                title: "@T("Admin.Omni_Backoffice.StudentSummary.Cnt_Primary")",
                                format: '{0:n0}',
                                width: 100,
                                filterable: false
                            }, {
                                field: "Cnt_Secondary",
                                title: "@T("Admin.Omni_Backoffice.Closing.Fields.Cnt_Secondary")",
                                format: '{0:n0}',
                                width: 100,
                                filterable: false
                           

                            }]
                        });
                    });
                </script>


                <canvas id="myChart" width="1024" height="400"></canvas>
                <script src="/Scripts/Chart.min.js"></script>
       

                <script type="text/javascript">

                    $(document).ready(function () {

                        $('#btnSearch').click(function () {
                            var grid = $('#grid').data('kendoGrid');
                            grid.dataSource.page(1); //new search. Set page size to 1
                            grid.dataSource.read();

                            drawchart();

                        });



                    });

                    function drawchart() {

                        var options = {
                            //Boolean - Whether the scale should start at zero, or an order of magnitude down from the lowest value
                            scaleBeginAtZero: true,

                            //Boolean - Whether grid lines are shown across the chart
                            scaleShowGridLines: true,

                            //String - Colour of the grid lines
                            scaleGridLineColor: "rgba(0,0,0,.05)",

                            //Number - Width of the grid lines
                            scaleGridLineWidth: 1,

                            //Boolean - Whether to show horizontal lines (except X axis)
                            scaleShowHorizontalLines: true,

                            //Boolean - Whether to show vertical lines (except Y axis)
                            scaleShowVerticalLines: true,

                            //Boolean - If there is a stroke on each bar
                            barShowStroke: true,

                            //Number - Pixel width of the bar stroke
                            barStrokeWidth: 2,

                            //Number - Spacing between each of the X value sets
                            barValueSpacing: 5,

                            //Number - Spacing between data sets within X values
                            barDatasetSpacing: 1,

                            //String - A legend template
                            legendTemplate: "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\"background-color:<%=datasets[i].fillColor%>\"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>"

                        }

                        

                        var grid = $('#grid').data('kendoGrid');
                        var lablenames = [];
                        var chartdatasets = [];
                        for (var i = 0; i < grid._data.length; i++)
                        {
                            lablenames[i] = getBranchName( grid._data[i].Branch);
                        }

                        var year = $('#@Html.FieldIdFor(model => model.Year)').val();
                        var term = $('#@Html.FieldIdFor(model => model.Term)').val()
                        $.getJSON("@Url.Action("GetStudentChartData")" + "?year=" + year + "&term=" + term, function (data2) {

                            var tempcnt = 0;

                            for (var i = 0; i < data2.length; i++)
                            {
                                if (i == 0) {
                                    chartdatasets[i] = {
                                        label: "Period",
                                        fillcolor: "blue",
                                        strokeColor: "blue",
                                        highlightFill: "blue",
                                        highlightStroke: "white",
                                        data: data2[i]
                                    };
                                }
                                if (i == 1) {
                                    chartdatasets[i] = {
                                        label: "Period",
                                        fillcolor: "red",
                                        strokeColor: "red",
                                        highlightFill: "red",
                                        highlightStroke: "white",
                                        data: data2[i]
                                    };
                                }
                                if (i == 2) {
                                    chartdatasets[i] = {
                                        label: "Period",
                                        fillcolor: "green",
                                        strokeColor: "green",
                                        highlightFill: "green",
                                        highlightStroke: "white",
                                        data: data2[i]
                                    };
                                }
                                if (i == 3) {
                                    chartdatasets[i] = {
                                        label: "Period",
                                        fillcolor: "purple",
                                        strokeColor: "purple",
                                        highlightFill: "purple",
                                        highlightStroke: "white",
                                        data: data2[i]
                                    };
                                }
                            }


                            var data = {
                                labels: lablenames,
                                datasets: chartdatasets
                            };



                            var ctx = document.getElementById("myChart").getContext("2d");
                            var myBarChart = new Chart(ctx).Bar(data, options);
                            myBarChart.update();

                        });



                    }



                    var allBranchList = [

                    @for (int i = 0; i < Model.AvailableBranch.Count; i++)
                    {
                        var branch = Model.AvailableBranch[i];
                        <text> { Code: "@branch.Value", Name: "@branch.Text" }  </text>
                        if (i != Model.AvailableBranch.Count - 1)
                        {
                            <text>,</text>
                        }
                    }
                    ];

                    function SetBranchDropDownEditor(container, options) {
                        $('<input required data-text-field="Name" data-value-field="Code" data-bind="value:' + options.field + '"/>')
                            .appendTo(container)
                            .kendoDropDownList({
                                autoBind: false,
                                dataSource: allBranchList
                            });
                    }
                    function getBranchName(branch) {
                        for (var i = 0; i < allBranchList.length; i++) {
                            if (allBranchList[i].Code == branch)
                                return allBranchList[i].Name;
                        }

                        return branch;
                    }


                    var allYearList = [

        @for (int i = 0; i < Model.AvailableYear.Count; i++)
                    {
                        var year = Model.AvailableYear[i];
                        <text> { Code: "@year.Value", Name: "@year.Text" } </text>
                        if (i != Model.AvailableYear.Count - 1)
                        {
                            <text>,</text>
                        }
                    }
                    ];

                    function SetYearDropDownEditor(container, options) {
                        $('<input required data-text-field="Name" data-value-field="Code" data-bind="value:' + options.field + '"/>')
                            .appendTo(container)
                            .kendoDropDownList({
                                autoBind: false,
                                dataSource: allYearList
                            });
                    }


                    var allTermList = [

        @for (int i = 0; i < Model.AvailableTerm.Count; i++)
                    {
                        var term = Model.AvailableTerm[i];
                        <text>   { Code: "@term.Value", Name: "@term.Text" } </text>
                        if (i != Model.AvailableTerm.Count - 1)
                        {
                            <text>,</text>
                        }
                    }
                    ];

                    function SetTermDropDownEditor(container, options) {
                        $('<input required data-text-field="Name" data-value-field="Code" data-bind="value:' + options.field + '"/>')
                            .appendTo(container)
                            .kendoDropDownList({
                                autoBind: false,
                                dataSource: allTermList
                            });
                    }
                    function getTermName(term) {
                        for (var i = 0; i < allTermList.length; i++) {
                            if (allTermList[i].Code == term)
                                return allTermList[i].Name;
                        }

                        return term;
                    }

                    var YNList = [{ Code: "Y", Name: "Y" }, { Code: "N", Name: "N" }];
                    function SetYNDropDownEditor(container, options) {
                        $('<input required data-text-field="Name" data-value-field="Code" data-bind="value:' + options.field + '"/>')
                            .appendTo(container)
                            .kendoDropDownList({
                                autoBind: false,
                                dataSource: YNList
                            });
                    }



</script>
            </td>
        </tr>
    </table>
}