@model Nop.Admin.Models.Omni_Analysis.EnrolSummaryModel
@{
    var gridPageSize = EngineContext.Current.Resolve<Nop.Core.Domain.Common.AdminAreaSettings>().GridPageSize;

    //page title
    ViewBag.Title = T("Admin.Omni_analysis.StudentSummaryBranch").Text;
}
@using (Html.BeginForm())
{
    <div class="section-header">
        <div class="title">
            <img src="@Url.Content("~/Administration/Content/images/ico-sales.png")" alt="" />
            @T("Admin.Omni_Analysis.StudentSummaryBranch")
        </div>

    </div>
    <table width="100%">
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.Year1):
            </td>
            <td class="adminData">
                @Html.DropDownListFor(model => model.Year1, Model.AvailableYear1, new { @class = "adminInput" })
            </td>
        </tr>

        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.Year2):
            </td>
            <td class="adminData">
                @Html.DropDownListFor(model => model.Year2, Model.AvailableYear2, new { @class = "adminInput" })
            </td>
        </tr>

        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.Branch):
            </td>
            <td class="adminData">
                @Html.DropDownListFor(model => model.Branch, Model.AvailableBranch, new { @class = "adminInput" })
            </td>
        </tr>

        <tr>
            <td colspan="2">
                <input type="button" id="btnSearch" class="k-button" value="@T("Admin.Common.Search")" />
            </td>
        </tr>

    </table>
    <p>
    </p>
    <table class="adminContent">
        @Html.ValidationSummary()
        <tr>
            <td>
                <div id="js-legend" class="chart-legend"></div>
                <canvas id="myChart" width="800" height="400"></canvas>
                
                <script src="/Scripts/Chart.min.js"></script>
                <style>
                    .chart-legend li span{
                        display: inline-block;
                        width: 12px;
                        height: 12px;
                        margin-right: 5px;
                    }
                    .chart-legend ul {
                        list-style-type: none;
                    }

                </style>

                <script type="text/javascript">

    $(document).ready(function () {

        $('#btnSearch').click(function () {

            drawchart();

        });



    });

    Chart.defaults.global = {
        // Boolean - Whether to animate the chart
        animation: true,

        // Number - Number of animation steps
        animationSteps: 60,

        // String - Animation easing effect
        // Possible effects are:
        // [easeInOutQuart, linear, easeOutBounce, easeInBack, easeInOutQuad,
        //  easeOutQuart, easeOutQuad, easeInOutBounce, easeOutSine, easeInOutCubic,
        //  easeInExpo, easeInOutBack, easeInCirc, easeInOutElastic, easeOutBack,
        //  easeInQuad, easeInOutExpo, easeInQuart, easeOutQuint, easeInOutCirc,
        //  easeInSine, easeOutExpo, easeOutCirc, easeOutCubic, easeInQuint,
        //  easeInElastic, easeInOutSine, easeInOutQuint, easeInBounce,
        //  easeOutElastic, easeInCubic]
        animationEasing: "easeOutQuart",

        // Boolean - If we should show the scale at all
        showScale: true,

        // Boolean - If we want to override with a hard coded scale
        scaleOverride: false,

        // ** Required if scaleOverride is true **
        // Number - The number of steps in a hard coded scale
        scaleSteps: null,
        // Number - The value jump in the hard coded scale
        scaleStepWidth: null,
        // Number - The scale starting value
        scaleStartValue: null,

        // String - Colour of the scale line
        scaleLineColor: "rgba(0,0,0,.1)",

        // Number - Pixel width of the scale line
        scaleLineWidth: 1,

        // Boolean - Whether to show labels on the scale
        scaleShowLabels: true,

        // Interpolated JS string - can access value
        scaleLabel: "<%=value%>",

        // Boolean - Whether the scale should stick to integers, not floats even if drawing space is there
        scaleIntegersOnly: true,

        // Boolean - Whether the scale should start at zero, or an order of magnitude down from the lowest value
        scaleBeginAtZero: false,

        // String - Scale label font declaration for the scale label
        scaleFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",

        // Number - Scale label font size in pixels
        scaleFontSize: 12,

        // String - Scale label font weight style
        scaleFontStyle: "normal",

        // String - Scale label font colour
        scaleFontColor: "#666",

        // Boolean - whether or not the chart should be responsive and resize when the browser does.
        responsive: false,

        // Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container
        maintainAspectRatio: true,

        // Boolean - Determines whether to draw tooltips on the canvas or not
        showTooltips: true,

        // Function - Determines whether to execute the customTooltips function instead of drawing the built in tooltips (See [Advanced - External Tooltips](#advanced-usage-custom-tooltips))
        customTooltips: false,

        // Array - Array of string names to attach tooltip events
        tooltipEvents: ["mousemove", "touchstart", "touchmove"],

        // String - Tooltip background colour
        tooltipFillColor: "rgba(0,0,0,0.8)",

        // String - Tooltip label font declaration for the scale label
        tooltipFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",

        // Number - Tooltip label font size in pixels
        tooltipFontSize: 14,

        // String - Tooltip font weight style
        tooltipFontStyle: "normal",

        // String - Tooltip label font colour
        tooltipFontColor: "#fff",

        // String - Tooltip title font declaration for the scale label
        tooltipTitleFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",

        // Number - Tooltip title font size in pixels
        tooltipTitleFontSize: 14,

        // String - Tooltip title font weight style
        tooltipTitleFontStyle: "bold",

        // String - Tooltip title font colour
        tooltipTitleFontColor: "#fff",

        // Number - pixel width of padding around tooltip text
        tooltipYPadding: 6,

        // Number - pixel width of padding around tooltip text
        tooltipXPadding: 6,

        // Number - Size of the caret on the tooltip
        tooltipCaretSize: 8,

        // Number - Pixel radius of the tooltip border
        tooltipCornerRadius: 6,

        // Number - Pixel offset from point x to tooltip edge
        tooltipXOffset: 10,

        // String - Template string for single tooltips
        tooltipTemplate: "<%if (label){%><%=label%>: <%}%><%= value %>",

        // String - Template string for multiple tooltips
        multiTooltipTemplate: "<%= value %>",

        // Function - Will fire on animation progression.
        onAnimationProgress: function () { },

        // Function - Will fire on animation completion.
        onAnimationComplete: function () { }
    }

    var options = {

        ///Boolean - Whether grid lines are shown across the chart
        scaleShowGridLines: true,

        //String - Colour of the grid lines
        scaleGridLineColor: "rgba(0,0,0,.05)",

        //Number - Width of the grid lines
        scaleGridLineWidth: 1,

        //Boolean - Whether to show horizontal lines (except X axis)
        scaleShowHorizontalLines: true,

        //Boolean - Whether to show vertical lines (except Y axis)
        scaleShowVerticalLines: true,

        //Boolean - Whether the line is curved between points
        bezierCurve: false,

        //Number - Tension of the bezier curve between points
        bezierCurveTension: 0.4,

        //Boolean - Whether to show a dot for each point
        pointDot: true,

        //Number - Radius of each point dot in pixels
        pointDotRadius: 4,

        //Number - Pixel width of point dot stroke
        pointDotStrokeWidth: 1,

        //Number - amount extra to add to the radius to cater for hit detection outside the drawn point
        pointHitDetectionRadius: 20,

        //Boolean - Whether to show a stroke for datasets
        datasetStroke: true,

        //Number - Pixel width of dataset stroke
        datasetStrokeWidth: 2,

        //Boolean - Whether to fill the dataset with a colour
        datasetFill: true,

        //String - A legend template
        legendTemplate: "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\"background-color:<%=datasets[i].strokeColor%>\"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>"

    };

    //default data



    var deflablenames = ["Term 1", "Term 2", "Term 3", "Term 4"];
    var defchartdatasets = [];
    var defdata = {
        labels: deflablenames,
        datasets: [
        {
            label: "My First dataset",
            fillColor: "rgba(255,120,220,0.8)",
            strokeColor: "rgba(255,120,220,0.8)",
            pointColor: "rgba(255,120,220,1)",
            pointStrokeColor: "#fff",
            pointHighlightFill: "#fff",
            pointHighlightStroke: "rgba(255,120,220,1)",
            data: [0, 0, 0, 0]
        },
        {
            label: "My Second dataset",
            fillColor: "rgba(151,187,205,0)",
            strokeColor: "rgba(151,187,205,1)",
            pointColor: "rgba(151,187,205,1)",
            pointStrokeColor: "#fff",
            pointHighlightFill: "#fff",
            pointHighlightStroke: "rgba(151,187,205,1)",
            data: [0, 0, 0, 0]
        }
        ]
    };

    var ctx = document.getElementById("myChart").getContext("2d");

    var myLineChart = new Chart(ctx).Line(defdata, options);

    function drawchart() {
        Chart.defaults.global.animation = true;

        var chartdatasets = [];


        var year1 = $('#@Html.FieldIdFor(model => model.Year1)').val();
        var year2 = $('#@Html.FieldIdFor(model => model.Year2)').val();
        var branch = $('#@Html.FieldIdFor(model => model.Branch)').val();


        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);

        $.getJSON("@Url.Action("GetEnrolSummaryBranchData1")" + "?year1=" + year1 + "&year2=" + year2 + "&branch=" + branch, function (data2) {

            var tempcnt = 0;

            for (var i = 0; i < data2.length; i++) {
                if (i == 0) {
                    chartdatasets[i] = {
                        label: year1,
                        fillColor: "rgba(255,120,220,0)",
                        strokeColor: "rgba(255,120,220,0.8)",
                        pointColor: "rgba(255,120,220,1)",
                        pointStrokeColor: "#fff",
                        pointHighlightFill: "#fff",
                        pointHighlightStroke: "rgba(255,120,220,1)",
                        data: data2[i]
                    };
                }
                if (i == 1) {
                    chartdatasets[i] = {
                        label: year2,
                        fillColor: "rgba(151,187,205,0)",
                        strokeColor: "rgba(151,187,205,1)",
                        pointColor: "rgba(151,187,205,1)",
                        pointStrokeColor: "#fff",
                        pointHighlightFill: "#fff",
                        pointHighlightStroke: "rgba(151,187,205,1)",
                        data: data2[i]
                    };
                }
            }


            var data = {
                labels: deflablenames,
                datasets: chartdatasets
            };

            myLineChart.clear();
            myLineChart.destroy();

            myLineChart = new Chart(ctx).Line(data, options);

            var legend = myLineChart.generateLegend();

            document.getElementById("js-legend").innerHTML = legend;

            myLineChart.update();

        });

    }



    var allBranchList = [

    @for (int i = 0; i < Model.AvailableBranch.Count; i++)
                    {
                        var branch = Model.AvailableBranch[i];
                        <text> { Code: "@branch.Value", Name: "@branch.Text" }  </text>
                        if (i != Model.AvailableBranch.Count - 1)
                        {
                            <text>,</text>
                        }
                    }
    ];


</script>


            </td>
        </tr>
    </table>
}